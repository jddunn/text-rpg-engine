!function(e,t){"object"==typeof exports&&"object"==typeof module?module.exports=t():"function"==typeof define&&define.amd?define("text-rpg-engine",[],t):"object"==typeof exports?exports["text-rpg-engine"]=t():e["text-rpg-engine"]=t()}("undefined"!=typeof self?self:this,function(){return function(e){var t={};function o(n){if(t[n])return t[n].exports;var r=t[n]={i:n,l:!1,exports:{}};return e[n].call(r.exports,r,r.exports,o),r.l=!0,r.exports}return o.m=e,o.c=t,o.d=function(e,t,n){o.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:n})},o.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},o.t=function(e,t){if(1&t&&(e=o(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var n=Object.create(null);if(o.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var r in e)o.d(n,r,function(t){return e[t]}.bind(null,r));return n},o.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return o.d(t,"a",t),t},o.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},o.p="",o(o.s=1)}([function(e,t,o){"use strict";function n(e,t){for(var o=0;o<t.length;o++){var n=t[o];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var r=function(){function e(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:[];!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.items=t}var t,o,r;return t=e,(o=[{key:"addItems",value:function(e){return this.items=this.items.concat(e),this.items}},{key:"dropItem",value:function(e){var t=this.items.filter(function(t){return t.name!==e});return this.items=t,this.items}}])&&n(t.prototype,o),r&&n(t,r),e}();t.default=r,e.exports=t.default},function(e,t,o){"use strict";var n;Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var r=new(((n=o(2))&&n.__esModule?n:{default:n}).default);t.default=r,e.exports=t.default},function(e,t,o){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var n=u(o(3)),r=u(o(4)),i=u(o(5)),s=u(o(6)),a=u(o(0));function u(e){return e&&e.__esModule?e:{default:e}}function l(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var o=[],n=!0,r=!1,i=void 0;try{for(var s,a=e[Symbol.iterator]();!(n=(s=a.next()).done)&&(o.push(s.value),!t||o.length!==t);n=!0);}catch(e){r=!0,i=e}finally{try{n||null==a.return||a.return()}finally{if(r)throw i}}return o}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance")}()}function c(e){return(c="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function f(e,t){for(var o=0;o<t.length;o++){var n=t[o];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}var h=function(){function e(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:[],o=(arguments.length>1&&void 0!==arguments[1]&&arguments[1],arguments.length>2&&void 0!==arguments[2]?arguments[2]:""),s=arguments.length>3&&void 0!==arguments[3]?arguments[3]:"";!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.Display=new n.default,this.Input=new r.default,this.rooms=[];var a=this;t.forEach(function(e){a.addRoom(e.name,e.getText,e.prompts,e.requirements)}),this.startRoom=o,this.endRoom=s,""===this.startRoom&&this.rooms.length>0&&(this.startRoom=this.rooms[0].name,this.Player.startRoom=this.startRoom,this.Player.currentRoom=this.Player.startRoom),""===this.endRoom&&this.rooms.length>1&&(this.endRoom=this.rooms[this.rooms.length-1].name),this.Player=new i.default(o=this.startRoom)}var t,o,u;return t=e,(o=[{key:"init",value:function(){var e;""===this.startRoom&&this.rooms.length>0&&(this.startRoom=this.rooms[0].name,this.Player.startRoom=this.startRoom,this.Player.currentRoom=this.Player.startRoom),""===this.endRoom&&this.rooms.length>1&&(this.endRoom=this.rooms[this.rooms.length-1].name);for(var t=0;t<this.rooms.length;t++)if(this.rooms[t].name===this.startRoom){e=this.rooms[t].getText;break}void 0===e&&(e="No starting room text found!"),this.Display.show(e)}},{key:"loadData",value:function(e){var t=this;e.game.rooms.forEach(function(e){var o=[],n=[];void 0!==e.prompts&&(o=e.prompts),void 0!==e.requirements&&(n=e.requiurements),t.addRoom(e.name,e.getText,o,n)}),void 0!==e.startRoom&&(this.startRoom=e.startRoom,this.Player.startRoom=e.startRoom),void 0!==e.endRoom&&(this.endRoom=e.endRoom),""!==this.startRoom&&void 0!==this.startRoom||this.rooms.length>0&&(this.startRoom=this.rooms[0].name,this.Player.startRoom=this.startRoom,this.Player.currentRoom=this.Player.startRoom),""!==this.endRoom&&void 0!==this.endRoom||this.rooms.length>1&&(this.endRoom=this.rooms[this.rooms.length-1].name)}},{key:"addRoom",value:function(e,t){var o=arguments.length>2&&void 0!==arguments[2]?arguments[2]:[],n=arguments.length>3&&void 0!==arguments[3]?arguments[3]:[],r=new s.default(e,t,o,n);return this.rooms.push(r),r}},{key:"dropRoom",value:function(e){var t=this.rooms.filter(function(t){return t.name!==e});return this.rooms=t,this.rooms}},{key:"getRoom",value:function(e){return this.rooms.find(function(t){return t.name===e})}},{key:"userSend",value:function(e){this.Input.send(e),this.decidePath(this.Input.value)}},{key:"decidePath",value:function(e){"restart"===e&&this.resetGame();var t=this,o=t.getRoom(t.Player.currentRoom);if(void 0!==c(o.prompts)){var n=!1;o.prompts.forEach(function(o){try{if(!1===n){var r=o.matchKeywords(e,t.Player.inventory.items);if(null!==r){if(n=!0,"success"in r&&(t.Display.show("<p>".concat(r.success.successText,"</p>")),void 0!==r.success.itemsGiven&&t.Player.inventory.addItems(r.success.itemsGiven),void 0!==r.success.roomToEnter)){var i,s,a=l(t.Player.enterRoom(t.getRoom(r.success.roomToEnter)),2);s=a[0],i=a[1],t.Display.append("<p>".concat(s,"</p>")),i&&r.success.roomToEnter===t.endRoom&&t.win()}if("fail"in r)return t.Display.show("".concat(r.fail.failText)),void t.Display.append("<p>Missing required items: ".concat(r.fail.missing.toString(),".</p>\n                                      <p>").concat(t.getRoom(t.Player.currentRoom).getText,"</p>"))}}}catch(e){console.log(e)}!1===n&&t.Display.show('<p>No actions could be done from: "'.concat(e,"\". Try something else, or be\n                              more specific about what you're doing.</p>\n                              <p>").concat(t.getRoom(t.Player.currentRoom).getText,"</p>"))})}else t.Display.show("<p>There doesn't seem to be any actions at all that you can do in this room.</p>\n                        ".concat(t.getRoom(t.Player.currentRoom).getText,"\n      "));console.log(e,this.Player)}},{key:"disableInput",value:function(){this.Input.disable()}},{key:"enableInput",value:function(){this.Input.enable()}},{key:"win",value:function(){for(var e=0;e<this.rooms.length;e++)if(this.rooms[e].name===this.endRoom){this.Display.append("<p>Game end.</p>");break}this.disableInput()}},{key:"resetGame",value:function(){this.Player.inventory=new a.default,this.Player.currentRoom=this.startRoom;var e=this.getRoom(this.startRoom);this.Display.show(e.getText),this.Input.enable()}}])&&f(t.prototype,o),u&&f(t,u),e}();t.default=h,e.exports=t.default},function(e,t,o){"use strict";function n(e,t){for(var o=0;o<t.length;o++){var n=t[o];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var r=function(){function e(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"",o=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"display";!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.html=t,this.elementId=o}var t,o,r;return t=e,(o=[{key:"show",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:null;null===e?document.getElementById(this.elementId).innerHTML=this.html:(document.getElementById(this.elementId).innerHTML=e,this.html=e)}},{key:"append",value:function(e){document.getElementById(this.elementId).innerHTML+=e}}])&&n(t.prototype,o),r&&n(t,r),e}();t.default=r,e.exports=t.default},function(e,t,o){"use strict";function n(e,t){for(var o=0;o<t.length;o++){var n=t[o];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var r=function(){function e(){var t=arguments.length>0&&void 0!==arguments[0]&&arguments[0],o=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"",n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:"input";!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.disabled=t,this.value=o,this.elementId=n}var t,o,r;return t=e,(o=[{key:"enable",value:function(){this.disabled=!1,document.getElementById("input").disabled=!1}},{key:"disable",value:function(){this.disabled=!0,document.getElementById("input").disabled=!0}},{key:"send",value:function(e){e=e.toLowerCase(),this.value=e}}])&&n(t.prototype,o),r&&n(t,r),e}();t.default=r,e.exports=t.default},function(e,t,o){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var n,r=(n=o(0))&&n.__esModule?n:{default:n};function i(e,t){for(var o=0;o<t.length;o++){var n=t[o];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}var s=function(){function e(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"",o=arguments.length>1&&void 0!==arguments[1]?arguments[1]:new r.default,n=(arguments.length>2&&void 0!==arguments[2]&&arguments[2],arguments[3]);!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.name=t,""===this.name&&(this.name="player"),this.inventory=o,""===this.currentRoom&&(this.currentRoom=this.startRoom),this.startRoom=n}var t,o,n;return t=e,(o=[{key:"enterRoom",value:function(e){var t=e.enter(this.inventory.items);return!1===t[1]||(this.currentRoom=e.name),[t[0],t[1]]}},{key:"getItem",value:function(e){return this.inventory.addItem(e),this.inventory}},{key:"dropItem",value:function(e){return this.inventory.dropItem(e),this.inventory}}])&&i(t.prototype,o),n&&i(t,n),e}();t.default=s,e.exports=t.default},function(e,t,o){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var n,r=(n=o(7))&&n.__esModule?n:{default:n};function i(e,t){for(var o=0;o<t.length;o++){var n=t[o];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}var s=function(){function e(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"",o=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"",n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:[],r=arguments.length>3&&void 0!==arguments[3]?arguments[3]:[];!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.name=t,this.getText=o;var i=this;this.prompts=[],n.forEach(function(e){i.addPrompt(e.name,e.keywords,e.results,e.requirements)}),this.requirements=r}var t,o,n;return t=e,(o=[{key:"addPrompt",value:function(e,t,o,n){var i=new r.default(e,t,o,n);return this.prompts.push(i),this.prompts}},{key:"enter",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:[],t="",o=!0;return this.requirements>0?0===e.length?(o=!1,this.requirements.forEach(function(e){t+="".concat(e.failText,". ")})):(this.requirements.forEach(function(e){var n=!1;this.items.forEach(function(t){t===e&&(n=!0)}),!1===n&&(o=!1,t+=e.failText)}),!0===o&&(t=this.getText)):t=this.getText,[t,o]}}])&&i(t.prototype,o),n&&i(t,n),e}();t.default=s,e.exports=t.default},function(e,t,o){"use strict";function n(e,t){for(var o=0;o<t.length;o++){var n=t[o];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var r=function(){function e(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"",o=arguments.length>1&&void 0!==arguments[1]?arguments[1]:[],n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{},r=arguments.length>3&&void 0!==arguments[3]?arguments[3]:[];!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.name=t,this.keywords=o.map(function(e){return e.toLowerCase()}),this.results=n,this.requirements=r}var t,o,r;return t=e,(o=[{key:"matchKeywords",value:function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:[],o=!1,n=[];return this.requirements.length>0&&this.requirements.forEach(function(e){var o=!1;t.forEach(function(t){t===e&&(o=!0)}),o||n.push(e)}),this.keywords.forEach(function(t){e.includes(t.toLowerCase())&&(o=!0)}),o?n.length>0?{fail:{missing:n,failText:this.results.failText}}:{success:this.results}:null}}])&&n(t.prototype,o),r&&n(t,r),e}();t.default=r,e.exports=t.default}])});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,