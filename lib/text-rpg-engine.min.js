!function(e,t){"object"==typeof exports&&"object"==typeof module?module.exports=t():"function"==typeof define&&define.amd?define("text-rpg-engine",[],t):"object"==typeof exports?exports["text-rpg-engine"]=t():e["text-rpg-engine"]=t()}("undefined"!=typeof self?self:this,function(){return function(e){var t={};function n(o){if(t[o])return t[o].exports;var r=t[o]={i:o,l:!1,exports:{}};return e[o].call(r.exports,r,r.exports,n),r.l=!0,r.exports}return n.m=e,n.c=t,n.d=function(e,t,o){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:o})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var o=Object.create(null);if(n.r(o),Object.defineProperty(o,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var r in e)n.d(o,r,function(t){return e[t]}.bind(null,r));return o},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=1)}([function(e,t,n){"use strict";function o(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var r=function(){function e(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:[];!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.items=t}var t,n,r;return t=e,(n=[{key:"addItems",value:function(e){return this.items=this.items.concat(e),this.items}},{key:"dropItem",value:function(e){var t=this.items.filter(function(t){return t.name!==e});return this.items=t,this.items}}])&&o(t.prototype,n),r&&o(t,r),e}();t.default=r,e.exports=t.default},function(e,t,n){"use strict";var o;Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var r=new(((o=n(2))&&o.__esModule?o:{default:o}).default);t.default=r,e.exports=t.default},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var o=u(n(3)),r=u(n(4)),i=u(n(5)),a=u(n(6)),s=u(n(0));function u(e){return e&&e.__esModule?e:{default:e}}function l(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=[],o=!0,r=!1,i=void 0;try{for(var a,s=e[Symbol.iterator]();!(o=(a=s.next()).done)&&(n.push(a.value),!t||n.length!==t);o=!0);}catch(e){r=!0,i=e}finally{try{o||null==s.return||s.return()}finally{if(r)throw i}}return n}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance")}()}function f(e){return(f="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function c(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}var d=function(){function e(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:[],n=(arguments.length>1&&void 0!==arguments[1]&&arguments[1],arguments.length>2&&void 0!==arguments[2]?arguments[2]:""),a=arguments.length>3&&void 0!==arguments[3]?arguments[3]:"";!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.Display=new o.default,this.Input=new r.default,this.rooms=t,this.startRoom=n,this.endRoom=a,this.Player=new i.default(n=this.startRoom)}var t,n,u;return t=e,(n=[{key:"init",value:function(){var e;""===this.startRoom&&this.rooms.length>0&&(this.startRoom=this.rooms[0].name,this.Player.startRoom=this.startRoom,this.Player.currentRoom=this.Player.startRoom),""===this.endRoom&&this.rooms.length>1&&(this.endRoom=this.rooms[this.rooms.length-1].name);for(var t=0;t<this.rooms.length;t++)if(this.rooms[t].name===this.startRoom){e=this.rooms[t].getText;break}void 0===e&&(e="No starting room text found!"),this.Display.show(e)}},{key:"loadData",value:function(e){var t=this;e.game.rooms.forEach(function(e){var n=[],o=[];void 0!==e.prompts&&(n=e.prompts),void 0!==e.requirements&&(o=e.requiurements),t.addRoom(e.name,e.getText,n,o)})}},{key:"addRoom",value:function(e,t){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:[],o=arguments.length>3&&void 0!==arguments[3]?arguments[3]:[],r=new a.default(e,t,n,o);return this.rooms.push(r),r}},{key:"dropRoom",value:function(e){var t=this.rooms.filter(function(t){return t.name!==e});return this.rooms=t,this.rooms}},{key:"getRoom",value:function(e){return this.rooms.find(function(t){return t.name===e})}},{key:"userSend",value:function(e){this.Input.send(e),this.decidePath(this.Input.value)}},{key:"decidePath",value:function(e){"restart"===e&&this.resetGame();var t=this,n=t.getRoom(t.Player.currentRoom);if(void 0!==f(n.prompts)){var o=!1;n.prompts.forEach(function(n){try{if(!1===o){var r=n.matchKeywords(e,t.Player.inventory.items);if(null!==r){if(o=!0,"success"in r&&(t.Display.show("<p>".concat(r.success.successText,"</p>")),void 0!==r.success.itemsGiven&&t.Player.inventory.addItems(r.success.itemsGiven),void 0!==r.success.roomToEnter)){var i,a,s=l(t.Player.enterRoom(t.getRoom(r.success.roomToEnter)),2);a=s[0],i=s[1],t.Display.append("<p>".concat(a,"</p>")),i&&r.success.roomToEnter===t.endRoom&&t.win()}if("fail"in r)return t.Display.show("".concat(r.fail.failText)),void t.Display.append("<p>Missing required items: ".concat(r.fail.missing.toString(),".</p>\n                                      <p>").concat(t.getRoom(t.Player.currentRoom).getText,"</p>"))}}}catch(e){console.log(e)}!1===o&&t.Display.show('<p>No actions could be done from: "'.concat(e,"\". Try something else, or be\n                              more specific about what you're doing.</p>\n                              <p>").concat(t.getRoom(t.Player.currentRoom).getText,"</p>"))})}else t.Display.show("<p>There doesn't seem to be any actions at all that you can do in this room.</p>\n                        ".concat(t.getRoom(t.Player.currentRoom).getText,"\n      "));console.log(e,this.Player)}},{key:"disableInput",value:function(){this.Input.disable()}},{key:"enableInput",value:function(){this.Input.enable()}},{key:"win",value:function(){for(var e=0;e<this.rooms.length;e++)if(this.rooms[e].name===this.endRoom){this.Display.append("<p>Game end.</p>");break}this.disableInput()}},{key:"resetGame",value:function(){this.Player.inventory=new s.default,this.Player.currentRoom=this.startRoom;var e=this.getRoom(this.startRoom);this.Display.show(e.getText),this.Input.enable()}}])&&c(t.prototype,n),u&&c(t,u),e}();t.default=d,e.exports=t.default},function(e,t,n){"use strict";function o(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var r=function(){function e(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"",n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"display";!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.html=t,this.elementId=n}var t,n,r;return t=e,(n=[{key:"show",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:null;null===e?document.getElementById(this.elementId).innerHTML=this.html:(document.getElementById(this.elementId).innerHTML=e,this.html=e)}},{key:"append",value:function(e){document.getElementById(this.elementId).innerHTML+=e}}])&&o(t.prototype,n),r&&o(t,r),e}();t.default=r,e.exports=t.default},function(e,t,n){"use strict";function o(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var r=function(){function e(){var t=arguments.length>0&&void 0!==arguments[0]&&arguments[0],n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"",o=arguments.length>2&&void 0!==arguments[2]?arguments[2]:"input";!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.disabled=t,this.value=n,this.elementId=o}var t,n,r;return t=e,(n=[{key:"enable",value:function(){this.disabled=!1,document.getElementById("input").disabled=!1}},{key:"disable",value:function(){this.disabled=!0,document.getElementById("input").disabled=!0}},{key:"send",value:function(e){e=e.toLowerCase(),this.value=e}}])&&o(t.prototype,n),r&&o(t,r),e}();t.default=r,e.exports=t.default},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var o,r=(o=n(0))&&o.__esModule?o:{default:o};function i(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}var a=function(){function e(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"",n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:new r.default,o=(arguments.length>2&&void 0!==arguments[2]&&arguments[2],arguments[3]);!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.name=t,""===this.name&&(this.name="player"),this.inventory=n,""===this.currentRoom&&(this.currentRoom=this.startRoom),this.startRoom=o}var t,n,o;return t=e,(n=[{key:"enterRoom",value:function(e){var t=e.enter(this.inventory.items);return!1===t[1]||(this.currentRoom=e.name),[t[0],t[1]]}},{key:"getItem",value:function(e){return this.inventory.addItem(e),this.inventory}},{key:"dropItem",value:function(e){return this.inventory.dropItem(e),this.inventory}}])&&i(t.prototype,n),o&&i(t,o),e}();t.default=a,e.exports=t.default},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var o,r=(o=n(7))&&o.__esModule?o:{default:o};function i(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}var a=function(){function e(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"",n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"",o=arguments.length>2&&void 0!==arguments[2]?arguments[2]:[],r=arguments.length>3&&void 0!==arguments[3]?arguments[3]:[];!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.name=t,this.getText=n;var i=this;this.prompts=[],o.forEach(function(e){i.addPrompt(e.name,e.keywords,e.results,e.requirements)}),this.requirements=r}var t,n,o;return t=e,(n=[{key:"addPrompt",value:function(e,t,n,o){var i=new r.default(e,t,n,o);return this.prompts.push(i),this.prompts}},{key:"enter",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:[],t="",n=!0;return this.requirements>0?0===e.length?(n=!1,this.requirements.forEach(function(e){t+="".concat(e.failText,". ")})):(this.requirements.forEach(function(e){var o=!1;this.items.forEach(function(t){t===e&&(o=!0)}),!1===o&&(n=!1,t+=e.failText)}),!0===n&&(t=this.getText)):t=this.getText,[t,n]}}])&&i(t.prototype,n),o&&i(t,o),e}();t.default=a,e.exports=t.default},function(e,t,n){"use strict";function o(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var r=function(){function e(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"",n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:[],o=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{},r=arguments.length>3&&void 0!==arguments[3]?arguments[3]:[];!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.name=t,this.keywords=n.map(function(e){return e.toLowerCase()}),this.results=o,this.requirements=r}var t,n,r;return t=e,(n=[{key:"matchKeywords",value:function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:[],n=!1,o=[];return this.requirements.length>0&&this.requirements.forEach(function(e){var n=!1;t.forEach(function(t){t===e&&(n=!0)}),n||o.push(e)}),this.keywords.forEach(function(t){e.includes(t.toLowerCase())&&(n=!0)}),n?o.length>0?{fail:{missing:o,failText:this.results.failText}}:{success:this.results}:null}}])&&o(t.prototype,n),r&&o(t,r),e}();t.default=r,e.exports=t.default}])});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,