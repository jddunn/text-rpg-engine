!function(e,t){"object"==typeof exports&&"object"==typeof module?module.exports=t():"function"==typeof define&&define.amd?define("text-rpg-engine",[],t):"object"==typeof exports?exports["text-rpg-engine"]=t():e["text-rpg-engine"]=t()}("undefined"!=typeof self?self:this,function(){return function(e){var t={};function n(o){if(t[o])return t[o].exports;var r=t[o]={i:o,l:!1,exports:{}};return e[o].call(r.exports,r,r.exports,n),r.l=!0,r.exports}return n.m=e,n.c=t,n.d=function(e,t,o){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:o})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var o=Object.create(null);if(n.r(o),Object.defineProperty(o,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var r in e)n.d(o,r,function(t){return e[t]}.bind(null,r));return o},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=1)}([function(e,t,n){"use strict";function o(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var r=function(){function e(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:[];!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.items=t}var t,n,r;return t=e,(n=[{key:"examine",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:null;return null!==e?this.items[e].getText:this.items.map(function(e){return e.name})}},{key:"getItemProps",value:function(e){return this.items[e]}},{key:"addItem",value:function(e){return this.items.push(e),this.items}},{key:"dropItem",value:function(e){var t=this.items.filter(function(t){return t.name!==e});return this.items=t,this.items}}])&&o(t.prototype,n),r&&o(t,r),e}();t.default=r,e.exports=t.default},function(e,t,n){"use strict";var o;Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var r=new(((o=n(2))&&o.__esModule?o:{default:o}).default);t.default=r,e.exports=t.default},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var o=s(n(3)),r=s(n(4)),i=s(n(5)),a=s(n(6)),u=s(n(0));function s(e){return e&&e.__esModule?e:{default:e}}function l(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=[],o=!0,r=!1,i=void 0;try{for(var a,u=e[Symbol.iterator]();!(o=(a=u.next()).done)&&(n.push(a.value),!t||n.length!==t);o=!0);}catch(e){r=!0,i=e}finally{try{o||null==u.return||u.return()}finally{if(r)throw i}}return n}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance")}()}function f(e){return(f="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function c(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}var d=function(){function e(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"",n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:[],a=arguments.length>2&&void 0!==arguments[2]?arguments[2]:"",u=arguments.length>3&&void 0!==arguments[3]?arguments[3]:"";!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.Display=new o.default,this.Input=new r.default,this.datapath=t,this.rooms=n,this.startRoom=a,this.endRoom=u,this.Player=new i.default(a=this.startRoom)}var t,n,s;return t=e,(n=[{key:"init",value:function(){var e;""!==this.dataPath&&console.log("Initialized game from: "+this.datapath),""===this.startRoom&&this.rooms.length>0&&(this.startRoom=this.rooms[0].name,this.Player.startRoom=this.startRoom,this.Player.currentRoom=this.Player.startRoom),""===this.endRoom&&this.rooms.length>1&&(this.endRoom=this.rooms[this.rooms.length-1].name);for(var t=0;t<this.rooms.length;t++)if(this.rooms[t].name===this.startRoom){e=this.rooms[t].getText;break}void 0===e&&(e="No starting room text found!"),this.Display.show(e)}},{key:"addRoom",value:function(e,t){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:[],o=arguments.length>3&&void 0!==arguments[3]?arguments[3]:[],r=new a.default(e,t,n,o);return this.rooms.push(r),r}},{key:"dropRoom",value:function(e){var t=this.rooms.filter(function(t){return t.name!==e});return this.rooms=t,this.rooms}},{key:"getRoom",value:function(e){return this.rooms.find(function(t){return t.name===e})}},{key:"userSend",value:function(e){this.Input.send(e),this.decidePath(this.Input.value)}},{key:"decidePath",value:function(e){"restart"===e&&this.resetGame();var t=this,n=t.getRoom(t.Player.currentRoom);void 0!==f(n.prompts)?(n.prompts.forEach(function(n){var o=n.matchKeywords(e);if(null!==o){if(t.Display.show(o.text),void 0!==o.items&&Array.prototype.push.apply(t.Player.inventory.items,o.items),void 0!==o.room){var r,i;t.Player.currentRoom=o.room;var a=l(t.Player.enterRoom(this.getRoom(o.room)),2);i=a[0],r=a[1],o.room===t.endRoom&&(r?t.win():t.Display.append(i))}}else t.Display.show('<p>No actions could be done from: "'.concat(e,'". Try something else.</p>\n                              ').concat(t.getRoom(t.Player.currentRoom).getText,"\n          "))}),console.log(e,this.Player)):t.Display.show("<p>There doesn't seem to be any actions at all that you can do in this room.</p>\n                        ".concat(t.getRoom(t.Player.currentRoom).getText,"\n      "))}},{key:"disableInput",value:function(){this.Input.disable()}},{key:"enableInput",value:function(){this.Input.enable()}},{key:"win",value:function(){for(var e=0;e<this.rooms.length;e++)this.rooms[e].name===this.endRoom&&(this.Display.append(this.rooms[e].getText),this.Display.append("<p>Game end.</p>"));this.disableInput()}},{key:"resetGame",value:function(){this.Player.inventory=new u.default,this.Player.currentRoom=this.startRoom;var e=this.getRoom(this.startRoom);this.Display.show(e.getText),this.Input.enable()}}])&&c(t.prototype,n),s&&c(t,s),e}();t.default=d,e.exports=t.default},function(e,t,n){"use strict";function o(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var r=function(){function e(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"",n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"display";!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.html=t,this.elementId=n}var t,n,r;return t=e,(n=[{key:"show",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:null;null===e?document.getElementById(this.elementId).innerHTML=this.html:(document.getElementById(this.elementId).innerHTML=e,this.html=e)}},{key:"append",value:function(e){document.getElementById(this.elementId).innerHTML+=e}}])&&o(t.prototype,n),r&&o(t,r),e}();t.default=r,e.exports=t.default},function(e,t,n){"use strict";function o(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var r=function(){function e(){var t=arguments.length>0&&void 0!==arguments[0]&&arguments[0],n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"",o=arguments.length>2&&void 0!==arguments[2]?arguments[2]:"input";!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.disabled=t,this.value=n,this.elementId=o}var t,n,r;return t=e,(n=[{key:"enable",value:function(){this.disabled=!1,document.getElementById("input").disabled=!1}},{key:"disable",value:function(){this.disabled=!0,document.getElementById("input").disabled=!0}},{key:"send",value:function(e){e=e.toLowerCase(),this.value=e}}])&&o(t.prototype,n),r&&o(t,r),e}();t.default=r,e.exports=t.default},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var o,r=(o=n(0))&&o.__esModule?o:{default:o};function i(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}var a=function(){function e(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"",n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:new r.default,o=(arguments.length>2&&void 0!==arguments[2]&&arguments[2],arguments[3]);!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.name=t,""===this.name&&(this.name="player"),this.inventory=n,""===this.currentRoom&&(this.currentRoom=this.startRoom),this.startRoom=o}var t,n,o;return t=e,(n=[{key:"enterRoom",value:function(e){var t=e.enter(this.inventory.items);return!1===t[1]||(this.currentRoom=e.name),[t[0],t[1]]}},{key:"getItem",value:function(e){return this.inventory.addItem(e),this.inventory}},{key:"dropItem",value:function(e){return this.inventory.dropItem(e),this.inventory}},{key:"doAction",value:function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:null;return null===t?this.currentRoom.doAction(e):t.doAction(e)}}])&&i(t.prototype,n),o&&i(t,o),e}();t.default=a,e.exports=t.default},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var o,r=(o=n(7))&&o.__esModule?o:{default:o};function i(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}var a=function(){function e(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"",n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"",o=arguments.length>2&&void 0!==arguments[2]?arguments[2]:[],r=arguments.length>3&&void 0!==arguments[3]?arguments[3]:[];!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.name=t,this.getText=n,this.prompts=o,this.requirements=r}var t,n,o;return t=e,(n=[{key:"addPrompt",value:function(e,t,n){var o=new r.default(e,t,n);return this.prompts.push(o),this.prompts}},{key:"enter",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:[],t="",n=!0;return this.requirements>0?0===e.length?(n=!1,this.requirements.forEach(function(e){t+="".concat(e.failText,". ")})):(this.requirements.forEach(function(e){var o=!1;this.items.forEach(function(t){t===e&&(o=!0)}),!1===o&&(n=!1,t+=e.failText)}),!0===n&&(t=this.getText)):t=this.getText,[t,n]}},{key:"doAction",value:function(e){var t={};return 0===this.prompts.length&&(t.text="There doesn't seem to be any actions you can do in this room."),Object.values(this.prompts).forEach(function(n,o){e===n&&(t.text=o.resultTextText,null!==o.resultTextItems&&(t.items=o.resultTextItems),null!==o.resultTextRoom&&(t.resultText=o.resultTextRoom))}),t}}])&&i(t.prototype,n),o&&i(t,o),e}();t.default=a,e.exports=t.default},function(e,t,n){"use strict";function o(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var r=function(){function e(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"",n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:[],o=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.name=t,this.keywords=n.map(function(e){return e.toLowerCase()}),this.results=o}var t,n,r;return t=e,(n=[{key:"matchKeywords",value:function(e){var t=!1;return this.keywords.forEach(function(n){e.includes(n.toLowerCase())&&(t=!0)}),t?this.results:null}}])&&o(t.prototype,n),r&&o(t,r),e}();t.default=r,e.exports=t.default}])});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly90ZXh0LXJwZy1lbmdpbmUvd2VicGFjay91bml2ZXJzYWxNb2R1bGVEZWZpbml0aW9uIiwid2VicGFjazovL3RleHQtcnBnLWVuZ2luZS93ZWJwYWNrL2Jvb3RzdHJhcCIsIndlYnBhY2s6Ly90ZXh0LXJwZy1lbmdpbmUvLi9zcmMvaW52ZW50b3J5LmpzIiwid2VicGFjazovL3RleHQtcnBnLWVuZ2luZS8uL3NyYy9pbmRleC5qcyIsIndlYnBhY2s6Ly90ZXh0LXJwZy1lbmdpbmUvLi9zcmMvZ2FtZS5qcyIsIndlYnBhY2s6Ly90ZXh0LXJwZy1lbmdpbmUvLi9zcmMvZGlzcGxheS5qcyIsIndlYnBhY2s6Ly90ZXh0LXJwZy1lbmdpbmUvLi9zcmMvaW5wdXQuanMiLCJ3ZWJwYWNrOi8vdGV4dC1ycGctZW5naW5lLy4vc3JjL3BsYXllci5qcyIsIndlYnBhY2s6Ly90ZXh0LXJwZy1lbmdpbmUvLi9zcmMvcm9vbS5qcyIsIndlYnBhY2s6Ly90ZXh0LXJwZy1lbmdpbmUvLi9zcmMvcHJvbXB0LmpzIl0sIm5hbWVzIjpbInJvb3QiLCJmYWN0b3J5IiwiZXhwb3J0cyIsIm1vZHVsZSIsImRlZmluZSIsImFtZCIsInNlbGYiLCJ0aGlzIiwiaW5zdGFsbGVkTW9kdWxlcyIsIl9fd2VicGFja19yZXF1aXJlX18iLCJtb2R1bGVJZCIsImkiLCJsIiwibW9kdWxlcyIsImNhbGwiLCJtIiwiYyIsImQiLCJuYW1lIiwiZ2V0dGVyIiwibyIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZW51bWVyYWJsZSIsImdldCIsInIiLCJTeW1ib2wiLCJ0b1N0cmluZ1RhZyIsInZhbHVlIiwidCIsIm1vZGUiLCJfX2VzTW9kdWxlIiwibnMiLCJjcmVhdGUiLCJrZXkiLCJiaW5kIiwibiIsIm9iamVjdCIsInByb3BlcnR5IiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJwIiwicyIsIkludmVudG9yeSIsIml0ZW1zIiwiYXJndW1lbnRzIiwibGVuZ3RoIiwidW5kZWZpbmVkIiwiX2NsYXNzQ2FsbENoZWNrIiwiaXRlbU5hbWUiLCJnZXRUZXh0IiwibWFwIiwiYSIsIml0ZW0iLCJwdXNoIiwibmV3SW52ZW50b3J5IiwiZmlsdGVyIiwiZGVmYXVsdCIsIl9kaXNwbGF5IiwiX2ludGVyb3BSZXF1aXJlRGVmYXVsdCIsIl9pbnB1dCIsIl9wbGF5ZXIiLCJfcm9vbSIsIl9pbnZlbnRvcnkiLCJHYW1lIiwiZGF0YXBhdGgiLCJyb29tcyIsInN0YXJ0Um9vbSIsImVuZFJvb20iLCJEaXNwbGF5IiwiSW5wdXQiLCJQbGF5ZXIiLCJkaXNwbGF5VGV4dCIsImRhdGFQYXRoIiwiY29uc29sZSIsImxvZyIsImN1cnJlbnRSb29tIiwic2hvdyIsInByb21wdHMiLCJyZXF1aXJlbWVudHMiLCJyb29tT2JqIiwicm9vbU5hbWUiLCJuZXdSb29tcyIsInJvb20iLCJmaW5kIiwieCIsIm1lc3NhZ2UiLCJzZW5kIiwiZGVjaWRlUGF0aCIsInJlc2V0R2FtZSIsIl90aGlzIiwiY3VyclJvb20iLCJnZXRSb29tIiwiX3R5cGVvZiIsImZvckVhY2giLCJwcm9tcHQiLCJtYXRjaGluZ1Byb21wdFJlc3VsdHMiLCJtYXRjaEtleXdvcmRzIiwidGV4dCIsIkFycmF5IiwiYXBwbHkiLCJpbnZlbnRvcnkiLCJlbnRlclJvb21SZXN1bHRTdWNjZXNzIiwiZW50ZXJSb29tUmVzdWx0VGV4dCIsIl90aGlzJFBsYXllciRlbnRlclJvbzIiLCJfc2xpY2VkVG9BcnJheSIsImVudGVyUm9vbSIsIndpbiIsImFwcGVuZCIsImNvbmNhdCIsImRpc2FibGUiLCJlbmFibGUiLCJkaXNhYmxlSW5wdXQiLCJodG1sIiwiZWxlbWVudElkIiwiZG9jdW1lbnQiLCJnZXRFbGVtZW50QnlJZCIsImlubmVySFRNTCIsImRpc2FibGVkIiwidG9Mb3dlckNhc2UiLCJyZXMiLCJlbnRlciIsImFkZEl0ZW0iLCJkcm9wSXRlbSIsImRvQWN0aW9uIiwiX3Byb21wdCIsIlJvb20iLCJrZXl3b3JkcyIsInJlc3VsdFRleHRzIiwicmVzdWx0VGV4dCIsIm1ldEFsbFJlcXVpcmVtZW50cyIsInJlcXVpcmVtZW50IiwiZmFpbFRleHQiLCJmb3VuZCIsInZhbHVlcyIsInZhbCIsInJlc3VsdFRleHRUZXh0IiwicmVzdWx0VGV4dEl0ZW1zIiwicmVzdWx0VGV4dFJvb20iLCJQcm9tcHQiLCJyZXN1bHRzIiwidiIsImtleXdvcmQiLCJpbmNsdWRlcyJdLCJtYXBwaW5ncyI6IkNBQUEsU0FBQUEsRUFBQUMsR0FDQSxpQkFBQUMsU0FBQSxpQkFBQUMsT0FDQUEsT0FBQUQsUUFBQUQsSUFDQSxtQkFBQUcsZUFBQUMsSUFDQUQsT0FBQSxxQkFBQUgsR0FDQSxpQkFBQUMsUUFDQUEsUUFBQSxtQkFBQUQsSUFFQUQsRUFBQSxtQkFBQUMsSUFSQSxDQVNDLG9CQUFBSyxVQUFBQyxLQUFBLFdBQ0QsbUJDVEEsSUFBQUMsRUFBQSxHQUdBLFNBQUFDLEVBQUFDLEdBR0EsR0FBQUYsRUFBQUUsR0FDQSxPQUFBRixFQUFBRSxHQUFBUixRQUdBLElBQUFDLEVBQUFLLEVBQUFFLEdBQUEsQ0FDQUMsRUFBQUQsRUFDQUUsR0FBQSxFQUNBVixRQUFBLElBVUEsT0FOQVcsRUFBQUgsR0FBQUksS0FBQVgsRUFBQUQsUUFBQUMsSUFBQUQsUUFBQU8sR0FHQU4sRUFBQVMsR0FBQSxFQUdBVCxFQUFBRCxRQTBEQSxPQXJEQU8sRUFBQU0sRUFBQUYsRUFHQUosRUFBQU8sRUFBQVIsRUFHQUMsRUFBQVEsRUFBQSxTQUFBZixFQUFBZ0IsRUFBQUMsR0FDQVYsRUFBQVcsRUFBQWxCLEVBQUFnQixJQUNBRyxPQUFBQyxlQUFBcEIsRUFBQWdCLEVBQUEsQ0FBMENLLFlBQUEsRUFBQUMsSUFBQUwsS0FLMUNWLEVBQUFnQixFQUFBLFNBQUF2QixHQUNBLG9CQUFBd0IsZUFBQUMsYUFDQU4sT0FBQUMsZUFBQXBCLEVBQUF3QixPQUFBQyxZQUFBLENBQXdEQyxNQUFBLFdBRXhEUCxPQUFBQyxlQUFBcEIsRUFBQSxjQUFpRDBCLE9BQUEsS0FRakRuQixFQUFBb0IsRUFBQSxTQUFBRCxFQUFBRSxHQUVBLEdBREEsRUFBQUEsSUFBQUYsRUFBQW5CLEVBQUFtQixJQUNBLEVBQUFFLEVBQUEsT0FBQUYsRUFDQSxLQUFBRSxHQUFBLGlCQUFBRixRQUFBRyxXQUFBLE9BQUFILEVBQ0EsSUFBQUksRUFBQVgsT0FBQVksT0FBQSxNQUdBLEdBRkF4QixFQUFBZ0IsRUFBQU8sR0FDQVgsT0FBQUMsZUFBQVUsRUFBQSxXQUF5Q1QsWUFBQSxFQUFBSyxVQUN6QyxFQUFBRSxHQUFBLGlCQUFBRixFQUFBLFFBQUFNLEtBQUFOLEVBQUFuQixFQUFBUSxFQUFBZSxFQUFBRSxFQUFBLFNBQUFBLEdBQWdILE9BQUFOLEVBQUFNLElBQXFCQyxLQUFBLEtBQUFELElBQ3JJLE9BQUFGLEdBSUF2QixFQUFBMkIsRUFBQSxTQUFBakMsR0FDQSxJQUFBZ0IsRUFBQWhCLEtBQUE0QixXQUNBLFdBQTJCLE9BQUE1QixFQUFBLFNBQzNCLFdBQWlDLE9BQUFBLEdBRWpDLE9BREFNLEVBQUFRLEVBQUFFLEVBQUEsSUFBQUEsR0FDQUEsR0FJQVYsRUFBQVcsRUFBQSxTQUFBaUIsRUFBQUMsR0FBc0QsT0FBQWpCLE9BQUFrQixVQUFBQyxlQUFBMUIsS0FBQXVCLEVBQUFDLElBR3REN0IsRUFBQWdDLEVBQUEsR0FJQWhDLElBQUFpQyxFQUFBLDhRQ2xGcUJDLGFBRW5CLFNBQUFBLElBQXdCLElBQVpDLEVBQVlDLFVBQUFDLE9BQUEsUUFBQUMsSUFBQUYsVUFBQSxHQUFBQSxVQUFBLEdBQUosZ0dBQUlHLENBQUF6QyxLQUFBb0MsR0FDdEJwQyxLQUFLcUMsTUFBUUEsMkRBR1UsSUFBakJLLEVBQWlCSixVQUFBQyxPQUFBLFFBQUFDLElBQUFGLFVBQUEsR0FBQUEsVUFBQSxHQUFOLEtBRWpCLE9BQWlCLE9BQWJJLEVBRUsxQyxLQUFLcUMsTUFBTUssR0FBVUMsUUFJdkIzQyxLQUFLcUMsTUFBTU8sSUFBSSxTQUFBQyxHQUFDLE9BQUlBLEVBQUVsQyw0Q0FHbEIrQixHQUNYLE9BQU8xQyxLQUFLcUMsTUFBTUssbUNBR1pJLEdBRU4sT0FEQTlDLEtBQUtxQyxNQUFNVSxLQUFLRCxHQUNUOUMsS0FBS3FDLHVDQUdMSyxHQUNQLElBQUlNLEVBQWVoRCxLQUFLcUMsTUFBTVksT0FBTyxTQUFTSCxHQUM1QyxPQUFPQSxFQUFLbkMsT0FBUytCLElBR3ZCLE9BREExQyxLQUFLcUMsTUFBUVcsRUFDTmhELEtBQUtxQyx5R0MvQmhCLHdFQUVBLE1BQWEsUUFGYm5DLEVBQUEsaUNBRWFnRCx5SUNGYixJQUFBQyxFQUFBQyxFQUFBbEQsRUFBQSxJQUNBbUQsRUFBQUQsRUFBQWxELEVBQUEsSUFDQW9ELEVBQUFGLEVBQUFsRCxFQUFBLElBQ0FxRCxFQUFBSCxFQUFBbEQsRUFBQSxJQUNBc0QsRUFBQUosRUFBQWxELEVBQUEsdzFCQUVxQnVELGFBRW5CLFNBQUFBLElBQXFFLElBQXpEQyxFQUF5RHBCLFVBQUFDLE9BQUEsUUFBQUMsSUFBQUYsVUFBQSxHQUFBQSxVQUFBLEdBQTlDLEdBQUlxQixFQUEwQ3JCLFVBQUFDLE9BQUEsUUFBQUMsSUFBQUYsVUFBQSxHQUFBQSxVQUFBLEdBQWxDLEdBQUlzQixFQUE4QnRCLFVBQUFDLE9BQUEsUUFBQUMsSUFBQUYsVUFBQSxHQUFBQSxVQUFBLEdBQWxCLEdBQUl1QixFQUFjdkIsVUFBQUMsT0FBQSxRQUFBQyxJQUFBRixVQUFBLEdBQUFBLFVBQUEsR0FBSixnR0FBSUcsQ0FBQXpDLEtBQUF5RCxHQUNuRXpELEtBQUs4RCxRQUFVLElBQUFYLEVBQUFELFFBQ2ZsRCxLQUFLK0QsTUFBUSxJQUFBVixFQUFBSCxRQUNibEQsS0FBSzBELFNBQVdBLEVBQ2hCMUQsS0FBSzJELE1BQVFBLEVBQ2IzRCxLQUFLNEQsVUFBWUEsRUFDakI1RCxLQUFLNkQsUUFBVUEsRUFFZjdELEtBQUtnRSxPQUFTLElBQUFWLEVBQUFKLFFBQVdVLEVBQVk1RCxLQUFLNEQsaUVBSTFDLElBQUlLLEVBQ2tCLEtBQWxCakUsS0FBS2tFLFVBRVBDLFFBQVFDLElBQUksMEJBQTRCcEUsS0FBSzBELFVBRXhCLEtBQW5CMUQsS0FBSzRELFdBQW9CNUQsS0FBSzJELE1BQU1wQixPQUFTLElBQy9DdkMsS0FBSzRELFVBQVk1RCxLQUFLMkQsTUFBTSxHQUFHaEQsS0FDL0JYLEtBQUtnRSxPQUFPSixVQUFZNUQsS0FBSzRELFVBQzdCNUQsS0FBS2dFLE9BQU9LLFlBQWNyRSxLQUFLZ0UsT0FBT0osV0FFbkIsS0FBakI1RCxLQUFLNkQsU0FBa0I3RCxLQUFLMkQsTUFBTXBCLE9BQVMsSUFDN0N2QyxLQUFLNkQsUUFBVTdELEtBQUsyRCxNQUFNM0QsS0FBSzJELE1BQU1wQixPQUFTLEdBQUc1QixNQUVuRCxJQUFLLElBQUlQLEVBQUksRUFBR0EsRUFBSUosS0FBSzJELE1BQU1wQixPQUFRbkMsSUFDckMsR0FBSUosS0FBSzJELE1BQU12RCxHQUFHTyxPQUFTWCxLQUFLNEQsVUFBVyxDQUN6Q0ssRUFBY2pFLEtBQUsyRCxNQUFNdkQsR0FBR3VDLFFBQzVCLFdBR2dCSCxJQUFoQnlCLElBQ0ZBLEVBQWMsZ0NBRWhCakUsS0FBSzhELFFBQVFRLEtBQUtMLG1DQUdadEQsRUFBTWdDLEdBQTBDLElBQWpDNEIsRUFBaUNqQyxVQUFBQyxPQUFBLFFBQUFDLElBQUFGLFVBQUEsR0FBQUEsVUFBQSxHQUF2QixHQUFJa0MsRUFBbUJsQyxVQUFBQyxPQUFBLFFBQUFDLElBQUFGLFVBQUEsR0FBQUEsVUFBQSxHQUFKLEdBQzlDbUMsRUFBVSxJQUFBbEIsRUFBQUwsUUFBU3ZDLEVBQU1nQyxFQUFTNEIsRUFBU0MsR0FFL0MsT0FEQXhFLEtBQUsyRCxNQUFNWixLQUFLMEIsR0FDVEEsbUNBR0FDLEdBQ1AsSUFBSUMsRUFBVzNFLEtBQUsyRCxNQUFNVixPQUFPLFNBQVMyQixHQUN4QyxPQUFPQSxFQUFLakUsT0FBUytELElBR3ZCLE9BREExRSxLQUFLMkQsTUFBUWdCLEVBQ04zRSxLQUFLMkQsc0NBR05lLEdBRU4sT0FEYTFFLEtBQUsyRCxNQUFNa0IsS0FBSyxTQUFBQyxHQUFDLE9BQUlBLEVBQUVuRSxPQUFTK0QscUNBSXRDSyxHQUVQL0UsS0FBSytELE1BQU1pQixLQUFLRCxHQUNoQi9FLEtBQUtpRixXQUFXakYsS0FBSytELE1BQU0xQywwQ0FHbEIwRCxHQUNPLFlBQVpBLEdBQ0YvRSxLQUFLa0YsWUFJUCxJQUFNQyxFQUFRbkYsS0FDUm9GLEVBQVdELEVBQU1FLFFBQVFGLEVBQU1uQixPQUFPSyxrQkFDWjdCLElBQTVCOEMsRUFBT0YsRUFBU2IsVUFDbEJhLEVBQVNiLFFBQVFnQixRQUFRLFNBQVVDLEdBQ2pDLElBQU1DLEVBQXdCRCxFQUFPRSxjQUFjWCxHQUNuRCxHQUE4QixPQUExQlUsR0FXRixHQVBBTixFQUFNckIsUUFBUVEsS0FBS21CLEVBQXNCRSxXQUdMbkQsSUFBaENpRCxFQUFzQnBELE9BQ3hCdUQsTUFBTTVELFVBQVVlLEtBQUs4QyxNQUFNVixFQUFNbkIsT0FBTzhCLFVBQVV6RCxNQUFPb0QsRUFBc0JwRCxZQUc5Q0csSUFBL0JpRCxFQUFzQmIsS0FBb0IsQ0FHNUMsSUFBSW1CLEVBQ0FDLEVBSEpiLEVBQU1uQixPQUFPSyxZQUFjb0IsRUFBc0JiLEtBREwsSUFBQXFCLEVBQUFDLEVBTTFDZixFQUFNbkIsT0FBT21DLFVBQVVuRyxLQUFLcUYsUUFBUUksRUFBc0JiLE9BTmhCLEdBSzNDb0IsRUFMMkNDLEVBQUEsR0FLdEJGLEVBTHNCRSxFQUFBLEdBT3hDUixFQUFzQmIsT0FBU08sRUFBTXRCLFVBQ25Da0MsRUFFRlosRUFBTWlCLE1BR05qQixFQUFNckIsUUFBUXVDLE9BQU9MLFVBTTNCYixFQUFNckIsUUFBUVEsS0FBZCxzQ0FBQWdDLE9BQXlEdkIsRUFBekQsOERBQUF1QixPQUNzQm5CLEVBQU1FLFFBQVFGLEVBQU1uQixPQUFPSyxhQUFhMUIsUUFEOUQsbUJBYU53QixRQUFRQyxJQUFJVyxFQUFTL0UsS0FBS2dFLFNBTHhCbUIsRUFBTXJCLFFBQVFRLEtBQWQsNkdBQUFnQyxPQUNvQm5CLEVBQU1FLFFBQVFGLEVBQU1uQixPQUFPSyxhQUFhMUIsUUFENUQsb0RBU0YzQyxLQUFLK0QsTUFBTXdDLGdEQUlYdkcsS0FBSytELE1BQU15Qyx1Q0FLWCxJQUFLLElBQUlwRyxFQUFJLEVBQUdBLEVBQUlKLEtBQUsyRCxNQUFNcEIsT0FBUW5DLElBQ2pDSixLQUFLMkQsTUFBTXZELEdBQUdPLE9BQVNYLEtBQUs2RCxVQUU5QjdELEtBQUs4RCxRQUFRdUMsT0FBT3JHLEtBQUsyRCxNQUFNdkQsR0FBR3VDLFNBQ2xDM0MsS0FBSzhELFFBQVF1QyxPQUFPLHFCQUl4QnJHLEtBQUt5RyxtREFLTHpHLEtBQUtnRSxPQUFPOEIsVUFBWSxJQUFBdEMsRUFBQU4sUUFDeEJsRCxLQUFLZ0UsT0FBT0ssWUFBY3JFLEtBQUs0RCxVQUMvQixJQUFNZ0IsRUFBTzVFLEtBQUtxRixRQUFRckYsS0FBSzRELFdBQy9CNUQsS0FBSzhELFFBQVFRLEtBQUtNLEVBQUtqQyxTQUN2QjNDLEtBQUsrRCxNQUFNeUMsd1ZDMUpNMUMsYUFFbkIsU0FBQUEsSUFBOEMsSUFBbEM0QyxFQUFrQ3BFLFVBQUFDLE9BQUEsUUFBQUMsSUFBQUYsVUFBQSxHQUFBQSxVQUFBLEdBQTNCLEdBQUlxRSxFQUF1QnJFLFVBQUFDLE9BQUEsUUFBQUMsSUFBQUYsVUFBQSxHQUFBQSxVQUFBLEdBQVgsdUdBQVdHLENBQUF6QyxLQUFBOEQsR0FDNUM5RCxLQUFLMEcsS0FBT0EsRUFDWjFHLEtBQUsyRyxVQUFZQSx3REFHRCxJQUFiRCxFQUFhcEUsVUFBQUMsT0FBQSxRQUFBQyxJQUFBRixVQUFBLEdBQUFBLFVBQUEsR0FBTixLQUNHLE9BQVRvRSxFQUNGRSxTQUFTQyxlQUFlN0csS0FBSzJHLFdBQVdHLFVBQVk5RyxLQUFLMEcsTUFFekRFLFNBQVNDLGVBQWU3RyxLQUFLMkcsV0FBV0csVUFBWUosRUFDcEQxRyxLQUFLMEcsS0FBT0Esa0NBSVRBLEdBQ0xFLFNBQVNDLGVBQWU3RyxLQUFLMkcsV0FBV0csV0FBYUosaVZDakJwQzNDLGFBRW5CLFNBQUFBLElBQStELElBQW5EZ0QsRUFBbUR6RSxVQUFBQyxPQUFBLFFBQUFDLElBQUFGLFVBQUEsSUFBQUEsVUFBQSxHQUFqQ2pCLEVBQWlDaUIsVUFBQUMsT0FBQSxRQUFBQyxJQUFBRixVQUFBLEdBQUFBLFVBQUEsR0FBekIsR0FBSXFFLEVBQXFCckUsVUFBQUMsT0FBQSxRQUFBQyxJQUFBRixVQUFBLEdBQUFBLFVBQUEsR0FBVCxxR0FBU0csQ0FBQXpDLEtBQUErRCxHQUM3RC9ELEtBQUsrRyxTQUFXQSxFQUNoQi9HLEtBQUtxQixNQUFRQSxFQUNickIsS0FBSzJHLFVBQVlBLDBEQUlqQjNHLEtBQUsrRyxVQUFXLEVBQ2hCSCxTQUFTQyxlQUFlLFNBQVNFLFVBQVcsb0NBSTVDL0csS0FBSytHLFVBQVcsRUFDaEJILFNBQVNDLGVBQWUsU0FBU0UsVUFBVywrQkFHekMxRixHQUVIQSxFQUFRQSxFQUFNMkYsY0FDZGhILEtBQUtxQixNQUFRQSx1S0NyQmpCLE1BQUFtQyxLQUFBdEQsRUFBQSwwTUFFcUI4RCxhQUVuQixTQUFBQSxJQUFpRixJQUFyRXJELEVBQXFFMkIsVUFBQUMsT0FBQSxRQUFBQyxJQUFBRixVQUFBLEdBQUFBLFVBQUEsR0FBOUQsR0FBSXdELEVBQTBEeEQsVUFBQUMsT0FBQSxRQUFBQyxJQUFBRixVQUFBLEdBQUFBLFVBQUEsR0FBOUMsSUFBQWtCLEVBQUFOLFFBQW1DVSxHQUFXdEIsVUFBQUMsT0FBQSxRQUFBQyxJQUFBRixVQUFBLElBQUFBLFVBQUEsR0FBQUEsVUFBQSxpR0FBQUcsQ0FBQXpDLEtBQUFnRSxHQUMvRWhFLEtBQUtXLEtBQU9BLEVBQ00sS0FBZFgsS0FBS1csT0FDUFgsS0FBS1csS0FBTyxVQUVkWCxLQUFLOEYsVUFBWUEsRUFDUSxLQUFyQjlGLEtBQUtxRSxjQUNQckUsS0FBS3FFLFlBQWNyRSxLQUFLNEQsV0FFMUI1RCxLQUFLNEQsVUFBWUEsMkRBR1RnQixHQUNSLElBQU1xQyxFQUFNckMsRUFBS3NDLE1BQU1sSCxLQUFLOEYsVUFBVXpELE9BUXRDLE9BUGUsSUFBWDRFLEVBQUksS0FJTmpILEtBQUtxRSxZQUFjTyxFQUFLakUsTUFHbkIsQ0FBQ3NHLEVBQUksR0FBSUEsRUFBSSxvQ0FHZG5FLEdBRU4sT0FEQTlDLEtBQUs4RixVQUFVcUIsUUFBUXJFLEdBQ2hCOUMsS0FBSzhGLDJDQUdMaEQsR0FFUCxPQURBOUMsS0FBSzhGLFVBQVVzQixTQUFTdEUsR0FDakI5QyxLQUFLOEYsMkNBR0xILEdBQW1CLElBQWI3QyxFQUFhUixVQUFBQyxPQUFBLFFBQUFDLElBQUFGLFVBQUEsR0FBQUEsVUFBQSxHQUFOLEtBRXBCLE9BQWEsT0FBVFEsRUFDSzlDLEtBQUtxRSxZQUFZZ0QsU0FBUzFCLEdBRzVCN0MsRUFBS3VFLFNBQVMxQix3S0M1Q3pCLE1BQUEyQixLQUFBcEgsRUFBQSwwTUFFcUJxSCxhQUVuQixTQUFBQSxJQUFzRSxJQUExRDVHLEVBQTBEMkIsVUFBQUMsT0FBQSxRQUFBQyxJQUFBRixVQUFBLEdBQUFBLFVBQUEsR0FBbkQsR0FBSUssRUFBK0NMLFVBQUFDLE9BQUEsUUFBQUMsSUFBQUYsVUFBQSxHQUFBQSxVQUFBLEdBQXJDLEdBQUlpQyxFQUFpQ2pDLFVBQUFDLE9BQUEsUUFBQUMsSUFBQUYsVUFBQSxHQUFBQSxVQUFBLEdBQXZCLEdBQUlrQyxFQUFtQmxDLFVBQUFDLE9BQUEsUUFBQUMsSUFBQUYsVUFBQSxHQUFBQSxVQUFBLEdBQUosZ0dBQUlHLENBQUF6QyxLQUFBdUgsR0FDcEV2SCxLQUFLVyxLQUFPQSxFQUNaWCxLQUFLMkMsUUFBVUEsRUFDZjNDLEtBQUt1RSxRQUFVQSxFQUNmdkUsS0FBS3dFLGFBQWVBLDJEQUdaN0QsRUFBTTZHLEVBQVVDLEdBQ3hCLElBQU1qQyxFQUFTLElBQUE4QixFQUFBcEUsUUFBV3ZDLEVBQU02RyxFQUFVQyxHQUUxQyxPQURBekgsS0FBS3VFLFFBQVF4QixLQUFLeUMsR0FDWHhGLEtBQUt1RSx3Q0FHSSxJQUFabEMsRUFBWUMsVUFBQUMsT0FBQSxRQUFBQyxJQUFBRixVQUFBLEdBQUFBLFVBQUEsR0FBSixHQUNSb0YsRUFBYSxHQUNiQyxHQUFxQixFQWdDekIsT0E5QkkzSCxLQUFLd0UsYUFBZSxFQUNELElBQWpCbkMsRUFBTUUsUUFDUm9GLEdBQXFCLEVBRXJCM0gsS0FBS3dFLGFBQWFlLFFBQVEsU0FBVXFDLEdBQ2xDRixHQUFVLEdBQUFwQixPQUFPc0IsRUFBWUMsU0FBbkIsVUFJWjdILEtBQUt3RSxhQUFhZSxRQUFRLFNBQVVxQyxHQUNsQyxJQUFJRSxHQUFRLEVBQ1o5SCxLQUFLcUMsTUFBTWtELFFBQVEsU0FBVXpDLEdBQ3ZCQSxJQUFTOEUsSUFDWEUsR0FBUSxNQUdFLElBQVZBLElBQ0ZILEdBQXFCLEVBRXJCRCxHQUFjRSxFQUFZQyxhQUdILElBQXZCRixJQUNGRCxFQUFhMUgsS0FBSzJDLFVBSXRCK0UsRUFBYTFILEtBQUsyQyxRQUdiLENBQUMrRSxFQUFZQyxvQ0FHYnRHLEdBRVAsSUFBSXFHLEVBQWEsR0FlakIsT0FkNEIsSUFBeEIxSCxLQUFLdUUsUUFBUWhDLFNBQ2ZtRixFQUFVLEtBQVcsaUVBRXZCNUcsT0FBT2lILE9BQU8vSCxLQUFLdUUsU0FBU2dCLFFBQVEsU0FBUzVELEVBQUtxRyxHQUM1QzNHLElBQVVNLElBQ1orRixFQUFVLEtBQVdNLEVBQUlDLGVBQ0csT0FBeEJELEVBQUlFLGtCQUNOUixFQUFVLE1BQVlNLEVBQUlFLGlCQUVELE9BQXZCRixFQUFJRyxpQkFDTlQsRUFBVSxXQUFpQk0sRUFBSUcsbUJBSTlCVCxpVkN2RVVVLGFBRW5CLFNBQUFBLElBQW9ELElBQXhDekgsRUFBd0MyQixVQUFBQyxPQUFBLFFBQUFDLElBQUFGLFVBQUEsR0FBQUEsVUFBQSxHQUFqQyxHQUFJa0YsRUFBNkJsRixVQUFBQyxPQUFBLFFBQUFDLElBQUFGLFVBQUEsR0FBQUEsVUFBQSxHQUFsQixHQUFJK0YsRUFBYy9GLFVBQUFDLE9BQUEsUUFBQUMsSUFBQUYsVUFBQSxHQUFBQSxVQUFBLEdBQUosZ0dBQUlHLENBQUF6QyxLQUFBb0ksR0FDbERwSSxLQUFLVyxLQUFPQSxFQUVaWCxLQUFLd0gsU0FBV0EsRUFBUzVFLElBQUksU0FBUzBGLEdBQUssT0FBT0EsRUFBRXRCLGdCQUlwRGhILEtBQUtxSSxRQUFVQSwrREFJSHRELEdBQ1osSUFBSStDLEdBQVEsRUFNWixPQUxBOUgsS0FBS3dILFNBQVNqQyxRQUFRLFNBQVNnRCxHQUN6QnhELEVBQVF5RCxTQUFTRCxFQUFRdkIsaUJBQzNCYyxHQUFRLEtBR1JBLEVBQ0s5SCxLQUFLcUksUUFFUCIsImZpbGUiOiJ0ZXh0LXJwZy1lbmdpbmUubWluLmpzIiwic291cmNlc0NvbnRlbnQiOlsiKGZ1bmN0aW9uIHdlYnBhY2tVbml2ZXJzYWxNb2R1bGVEZWZpbml0aW9uKHJvb3QsIGZhY3RvcnkpIHtcblx0aWYodHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgPT09ICdvYmplY3QnKVxuXHRcdG1vZHVsZS5leHBvcnRzID0gZmFjdG9yeSgpO1xuXHRlbHNlIGlmKHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZClcblx0XHRkZWZpbmUoXCJ0ZXh0LXJwZy1lbmdpbmVcIiwgW10sIGZhY3RvcnkpO1xuXHRlbHNlIGlmKHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0Jylcblx0XHRleHBvcnRzW1widGV4dC1ycGctZW5naW5lXCJdID0gZmFjdG9yeSgpO1xuXHRlbHNlXG5cdFx0cm9vdFtcInRleHQtcnBnLWVuZ2luZVwiXSA9IGZhY3RvcnkoKTtcbn0pKHR5cGVvZiBzZWxmICE9PSAndW5kZWZpbmVkJyA/IHNlbGYgOiB0aGlzLCBmdW5jdGlvbigpIHtcbnJldHVybiAiLCIgXHQvLyBUaGUgbW9kdWxlIGNhY2hlXG4gXHR2YXIgaW5zdGFsbGVkTW9kdWxlcyA9IHt9O1xuXG4gXHQvLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuIFx0ZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXG4gXHRcdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuIFx0XHRpZihpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSkge1xuIFx0XHRcdHJldHVybiBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXS5leHBvcnRzO1xuIFx0XHR9XG4gXHRcdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG4gXHRcdHZhciBtb2R1bGUgPSBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSA9IHtcbiBcdFx0XHRpOiBtb2R1bGVJZCxcbiBcdFx0XHRsOiBmYWxzZSxcbiBcdFx0XHRleHBvcnRzOiB7fVxuIFx0XHR9O1xuXG4gXHRcdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuIFx0XHRtb2R1bGVzW21vZHVsZUlkXS5jYWxsKG1vZHVsZS5leHBvcnRzLCBtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblxuIFx0XHQvLyBGbGFnIHRoZSBtb2R1bGUgYXMgbG9hZGVkXG4gXHRcdG1vZHVsZS5sID0gdHJ1ZTtcblxuIFx0XHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuIFx0XHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG4gXHR9XG5cblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGVzIG9iamVjdCAoX193ZWJwYWNrX21vZHVsZXNfXylcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubSA9IG1vZHVsZXM7XG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlIGNhY2hlXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmMgPSBpbnN0YWxsZWRNb2R1bGVzO1xuXG4gXHQvLyBkZWZpbmUgZ2V0dGVyIGZ1bmN0aW9uIGZvciBoYXJtb255IGV4cG9ydHNcbiBcdF9fd2VicGFja19yZXF1aXJlX18uZCA9IGZ1bmN0aW9uKGV4cG9ydHMsIG5hbWUsIGdldHRlcikge1xuIFx0XHRpZighX193ZWJwYWNrX3JlcXVpcmVfXy5vKGV4cG9ydHMsIG5hbWUpKSB7XG4gXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIG5hbWUsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBnZXR0ZXIgfSk7XG4gXHRcdH1cbiBcdH07XG5cbiBcdC8vIGRlZmluZSBfX2VzTW9kdWxlIG9uIGV4cG9ydHNcbiBcdF9fd2VicGFja19yZXF1aXJlX18uciA9IGZ1bmN0aW9uKGV4cG9ydHMpIHtcbiBcdFx0aWYodHlwZW9mIFN5bWJvbCAhPT0gJ3VuZGVmaW5lZCcgJiYgU3ltYm9sLnRvU3RyaW5nVGFnKSB7XG4gXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFN5bWJvbC50b1N0cmluZ1RhZywgeyB2YWx1ZTogJ01vZHVsZScgfSk7XG4gXHRcdH1cbiBcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcbiBcdH07XG5cbiBcdC8vIGNyZWF0ZSBhIGZha2UgbmFtZXNwYWNlIG9iamVjdFxuIFx0Ly8gbW9kZSAmIDE6IHZhbHVlIGlzIGEgbW9kdWxlIGlkLCByZXF1aXJlIGl0XG4gXHQvLyBtb2RlICYgMjogbWVyZ2UgYWxsIHByb3BlcnRpZXMgb2YgdmFsdWUgaW50byB0aGUgbnNcbiBcdC8vIG1vZGUgJiA0OiByZXR1cm4gdmFsdWUgd2hlbiBhbHJlYWR5IG5zIG9iamVjdFxuIFx0Ly8gbW9kZSAmIDh8MTogYmVoYXZlIGxpa2UgcmVxdWlyZVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy50ID0gZnVuY3Rpb24odmFsdWUsIG1vZGUpIHtcbiBcdFx0aWYobW9kZSAmIDEpIHZhbHVlID0gX193ZWJwYWNrX3JlcXVpcmVfXyh2YWx1ZSk7XG4gXHRcdGlmKG1vZGUgJiA4KSByZXR1cm4gdmFsdWU7XG4gXHRcdGlmKChtb2RlICYgNCkgJiYgdHlwZW9mIHZhbHVlID09PSAnb2JqZWN0JyAmJiB2YWx1ZSAmJiB2YWx1ZS5fX2VzTW9kdWxlKSByZXR1cm4gdmFsdWU7XG4gXHRcdHZhciBucyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gXHRcdF9fd2VicGFja19yZXF1aXJlX18ucihucyk7XG4gXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShucywgJ2RlZmF1bHQnLCB7IGVudW1lcmFibGU6IHRydWUsIHZhbHVlOiB2YWx1ZSB9KTtcbiBcdFx0aWYobW9kZSAmIDIgJiYgdHlwZW9mIHZhbHVlICE9ICdzdHJpbmcnKSBmb3IodmFyIGtleSBpbiB2YWx1ZSkgX193ZWJwYWNrX3JlcXVpcmVfXy5kKG5zLCBrZXksIGZ1bmN0aW9uKGtleSkgeyByZXR1cm4gdmFsdWVba2V5XTsgfS5iaW5kKG51bGwsIGtleSkpO1xuIFx0XHRyZXR1cm4gbnM7XG4gXHR9O1xuXG4gXHQvLyBnZXREZWZhdWx0RXhwb3J0IGZ1bmN0aW9uIGZvciBjb21wYXRpYmlsaXR5IHdpdGggbm9uLWhhcm1vbnkgbW9kdWxlc1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5uID0gZnVuY3Rpb24obW9kdWxlKSB7XG4gXHRcdHZhciBnZXR0ZXIgPSBtb2R1bGUgJiYgbW9kdWxlLl9fZXNNb2R1bGUgP1xuIFx0XHRcdGZ1bmN0aW9uIGdldERlZmF1bHQoKSB7IHJldHVybiBtb2R1bGVbJ2RlZmF1bHQnXTsgfSA6XG4gXHRcdFx0ZnVuY3Rpb24gZ2V0TW9kdWxlRXhwb3J0cygpIHsgcmV0dXJuIG1vZHVsZTsgfTtcbiBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kKGdldHRlciwgJ2EnLCBnZXR0ZXIpO1xuIFx0XHRyZXR1cm4gZ2V0dGVyO1xuIFx0fTtcblxuIFx0Ly8gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm8gPSBmdW5jdGlvbihvYmplY3QsIHByb3BlcnR5KSB7IHJldHVybiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCBwcm9wZXJ0eSk7IH07XG5cbiBcdC8vIF9fd2VicGFja19wdWJsaWNfcGF0aF9fXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnAgPSBcIlwiO1xuXG5cbiBcdC8vIExvYWQgZW50cnkgbW9kdWxlIGFuZCByZXR1cm4gZXhwb3J0c1xuIFx0cmV0dXJuIF9fd2VicGFja19yZXF1aXJlX18oX193ZWJwYWNrX3JlcXVpcmVfXy5zID0gMSk7XG4iLCJleHBvcnQgZGVmYXVsdCBjbGFzcyBJbnZlbnRvcnkge1xyXG5cclxuICBjb25zdHJ1Y3RvcihpdGVtcyA9IFtdKSB7XHJcbiAgICB0aGlzLml0ZW1zID0gaXRlbXM7XHJcbiAgfVxyXG4gIFxyXG4gIGV4YW1pbmUoaXRlbU5hbWUgPSBudWxsKSB7XHJcbiAgICAvLyBJZiB3ZSdyZSBleGFtaW5pbmcgYW4gaXRlbVxyXG4gICAgaWYgKGl0ZW1OYW1lICE9PSBudWxsKSB7XHJcbiAgICAgIC8vIERpc3BsYXkgaXRlbSBnZXRUZXh0XHJcbiAgICAgIHJldHVybiB0aGlzLml0ZW1zW2l0ZW1OYW1lXS5nZXRUZXh0O1xyXG4gICAgfVxyXG4gICAgLy8gSWYgd2UncmUgZXhhbWluaW5nIGludmVudG9yeSwgcHJpbnQgb3V0XHJcbiAgICAvLyBsaXN0IG9mIGFsbCB0aGUgaXRlbXMuXHJcbiAgICByZXR1cm4gdGhpcy5pdGVtcy5tYXAoYSA9PiBhLm5hbWUpO1xyXG4gIH1cclxuXHJcbiAgZ2V0SXRlbVByb3BzKGl0ZW1OYW1lKSB7XHJcbiAgICByZXR1cm4gdGhpcy5pdGVtc1tpdGVtTmFtZV07XHJcbiAgfVxyXG5cclxuICBhZGRJdGVtKGl0ZW0pIHtcclxuICAgIHRoaXMuaXRlbXMucHVzaChpdGVtKTtcclxuICAgIHJldHVybiB0aGlzLml0ZW1zO1xyXG4gIH1cclxuXHJcbiAgZHJvcEl0ZW0oaXRlbU5hbWUpIHtcclxuICAgIGxldCBuZXdJbnZlbnRvcnkgPSB0aGlzLml0ZW1zLmZpbHRlcihmdW5jdGlvbihpdGVtKSB7XHJcbiAgICAgIHJldHVybiBpdGVtLm5hbWUgIT09IGl0ZW1OYW1lO1xyXG4gICAgfSk7XHJcbiAgICB0aGlzLml0ZW1zID0gbmV3SW52ZW50b3J5O1xyXG4gICAgcmV0dXJuIHRoaXMuaXRlbXM7XHJcbiAgfVxyXG59XHJcbiIsImltcG9ydCBHYW1lIGZyb20gJy4vZ2FtZSc7XHJcblxyXG5jb25zdCBnYW1lID0gbmV3IEdhbWUoKTtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGdhbWU7XHJcbiIsImltcG9ydCBEaXNwbGF5IGZyb20gJy4vZGlzcGxheSc7XHJcbmltcG9ydCBJbnB1dCBmcm9tICcuL2lucHV0JztcclxuaW1wb3J0IFBsYXllciBmcm9tICcuL3BsYXllcic7XHJcbmltcG9ydCBSb29tIGZyb20gJy4vcm9vbSc7XHJcbmltcG9ydCBJbnZlbnRvcnkgZnJvbSAnLi9pbnZlbnRvcnknO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgR2FtZSB7XHJcblxyXG4gIGNvbnN0cnVjdG9yKGRhdGFwYXRoID0gJycsIHJvb21zID0gW10sIHN0YXJ0Um9vbSA9ICcnLCBlbmRSb29tID0gJycpIHtcclxuICAgIHRoaXMuRGlzcGxheSA9IG5ldyBEaXNwbGF5KCk7XHJcbiAgICB0aGlzLklucHV0ID0gbmV3IElucHV0KCk7XHJcbiAgICB0aGlzLmRhdGFwYXRoID0gZGF0YXBhdGg7IC8vIFRPRE86IEJlIGFibGUgdG8gaGF2ZSBnYW1lIGluaXRpYWxpemUgZGF0YSBmcm9tIEpTT04gZmlsZVxyXG4gICAgdGhpcy5yb29tcyA9IHJvb21zOyAvLyBBbGwgdGhlIHJvb21zIGluc2lkZSBvdXIgZ2FtZVxyXG4gICAgdGhpcy5zdGFydFJvb20gPSBzdGFydFJvb207IC8vIFdoaWNoIHJvb20gd2lsbCB0aGUgcGxheWVyIHN0YXJ0IGluXHJcbiAgICB0aGlzLmVuZFJvb20gPSBlbmRSb29tOyAvLyBXaGljaCByb29tIFxyXG4gICAgLy8gVE9ETzogQWxsb3cgcGxheWVycyB0byBnaXZlIHRoZWlyIGNoYXJhY3RlcnMgdGhlaXIgb3duIG5hbWVzIGxhdGVyXHJcbiAgICB0aGlzLlBsYXllciA9IG5ldyBQbGF5ZXIoc3RhcnRSb29tID0gdGhpcy5zdGFydFJvb20pOyBcclxuICB9XHJcblxyXG4gIGluaXQoKSB7XHJcbiAgICBsZXQgZGlzcGxheVRleHQ7XHJcbiAgICBpZiAodGhpcy5kYXRhUGF0aCAhPT0gJycpIHtcclxuICAgICAgLy8gdGhpcy5sb2FkRGF0YSh0aGlzLmRhdGFQYXRoKTtcclxuICAgICAgY29uc29sZS5sb2coJ0luaXRpYWxpemVkIGdhbWUgZnJvbTogJyArIHRoaXMuZGF0YXBhdGgpO1xyXG4gICAgfVxyXG4gICAgaWYgKHRoaXMuc3RhcnRSb29tID09PSAnJyAmJiB0aGlzLnJvb21zLmxlbmd0aCA+IDApIHtcclxuICAgICAgdGhpcy5zdGFydFJvb20gPSB0aGlzLnJvb21zWzBdLm5hbWU7IFxyXG4gICAgICB0aGlzLlBsYXllci5zdGFydFJvb20gPSB0aGlzLnN0YXJ0Um9vbTtcclxuICAgICAgdGhpcy5QbGF5ZXIuY3VycmVudFJvb20gPSB0aGlzLlBsYXllci5zdGFydFJvb207XHJcbiAgICB9XHJcbiAgICBpZiAodGhpcy5lbmRSb29tID09PSAnJyAmJiB0aGlzLnJvb21zLmxlbmd0aCA+IDEpIHtcclxuICAgICAgdGhpcy5lbmRSb29tID0gdGhpcy5yb29tc1t0aGlzLnJvb21zLmxlbmd0aCAtIDFdLm5hbWU7ICAgICAgXHJcbiAgICB9XHJcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMucm9vbXMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgaWYgKHRoaXMucm9vbXNbaV0ubmFtZSA9PT0gdGhpcy5zdGFydFJvb20pIHtcclxuICAgICAgICBkaXNwbGF5VGV4dCA9IHRoaXMucm9vbXNbaV0uZ2V0VGV4dDtcclxuICAgICAgICBicmVhaztcclxuICAgICAgfVxyXG4gICAgfVxyXG4gICAgaWYgKGRpc3BsYXlUZXh0ID09PSB1bmRlZmluZWQpIHtcclxuICAgICAgZGlzcGxheVRleHQgPSAnTm8gc3RhcnRpbmcgcm9vbSB0ZXh0IGZvdW5kISc7XHJcbiAgICB9XHJcbiAgICB0aGlzLkRpc3BsYXkuc2hvdyhkaXNwbGF5VGV4dCk7XHJcbiAgfVxyXG5cclxuICBhZGRSb29tKG5hbWUsIGdldFRleHQsIHByb21wdHMgPSBbXSwgcmVxdWlyZW1lbnRzID0gW10pIHtcclxuICAgIGxldCByb29tT2JqID0gbmV3IFJvb20obmFtZSwgZ2V0VGV4dCwgcHJvbXB0cywgcmVxdWlyZW1lbnRzKTtcclxuICAgIHRoaXMucm9vbXMucHVzaChyb29tT2JqKTtcclxuICAgIHJldHVybiByb29tT2JqO1xyXG4gIH1cclxuXHJcbiAgZHJvcFJvb20ocm9vbU5hbWUpIHtcclxuICAgIGxldCBuZXdSb29tcyA9IHRoaXMucm9vbXMuZmlsdGVyKGZ1bmN0aW9uKHJvb20pIHtcclxuICAgICAgcmV0dXJuIHJvb20ubmFtZSAhPT0gcm9vbU5hbWU7XHJcbiAgICB9KTtcclxuICAgIHRoaXMucm9vbXMgPSBuZXdSb29tcztcclxuICAgIHJldHVybiB0aGlzLnJvb21zO1xyXG4gIH1cclxuXHJcbiAgZ2V0Um9vbShyb29tTmFtZSkge1xyXG4gICAgY29uc3Qgcm9vbSA9IHRoaXMucm9vbXMuZmluZCh4ID0+IHgubmFtZSA9PT0gcm9vbU5hbWUpO1xyXG4gICAgcmV0dXJuIHJvb207XHJcbiAgfVxyXG5cclxuICB1c2VyU2VuZChtZXNzYWdlKSB7XHJcbiAgICAvLyBPdXIgSW5wdXQgY2xhc3Mgd2lsbCBoYW5kbGUgY2xlYW5pbmcgLyBub3JtYWxpemluZyBzdHJpbmdzXHJcbiAgICB0aGlzLklucHV0LnNlbmQobWVzc2FnZSk7XHJcbiAgICB0aGlzLmRlY2lkZVBhdGgodGhpcy5JbnB1dC52YWx1ZSk7XHJcbiAgfVxyXG5cclxuICBkZWNpZGVQYXRoKG1lc3NhZ2UpIHtcclxuICAgIGlmIChtZXNzYWdlID09PSAncmVzdGFydCcpIHtcclxuICAgICAgdGhpcy5yZXNldEdhbWUoKTtcclxuICAgIH1cclxuICAgIC8vIENoZWNrIHRvIHNlZSBpZiBhbiBpdGVtIG5hbWUgd2FzIGluIHRoZSBtZXNzYWdlXHJcbiAgICAvLyBpZiAobWVzc2FnZS5zcGxpdCgpKVxyXG4gICAgY29uc3QgX3RoaXMgPSB0aGlzO1xyXG4gICAgY29uc3QgY3VyclJvb20gPSBfdGhpcy5nZXRSb29tKF90aGlzLlBsYXllci5jdXJyZW50Um9vbSk7XHJcbiAgICBpZiAodHlwZW9mIGN1cnJSb29tLnByb21wdHMgIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICBjdXJyUm9vbS5wcm9tcHRzLmZvckVhY2goZnVuY3Rpb24gKHByb21wdCkge1xyXG4gICAgICAgIGNvbnN0IG1hdGNoaW5nUHJvbXB0UmVzdWx0cyA9IHByb21wdC5tYXRjaEtleXdvcmRzKG1lc3NhZ2UpO1xyXG4gICAgICAgIGlmIChtYXRjaGluZ1Byb21wdFJlc3VsdHMgIT09IG51bGwpIHtcclxuICAgICAgICAgIC8vIEZvciBub3cganVzdCBnZXQgdGhlIGZpcnN0IG1hdGNoaW5nIHJlc3VsdCBhbmQgc2hvdyB0aGF0XHJcbiAgICAgICAgICAvLyAob25seSBvbmUgcHJvbXB0IC8gYWN0aW9uIHBlciBtZXNzYWdlIGlzIHNlbnQgaXMgc3VwcG9ydGVkKVxyXG4gICAgICAgICAgLy8gY29uc29sZS5sb2coJ0ZPVU5EIE1BVENISU5HIFBST01QVCBSRVNVTFRTOiAnLCBtYXRjaGluZ1Byb21wdFJlc3VsdHMpO1xyXG4gICAgICAgICAgX3RoaXMuRGlzcGxheS5zaG93KG1hdGNoaW5nUHJvbXB0UmVzdWx0cy50ZXh0KTtcclxuICAgICAgICAgIC8vIEdldCBpdGVtcyBmcm9tIHByb21wdCBpZiBhbnkgYXJlIGZvdW5kXHJcbiAgICAgICAgICAvLyBNZXJnZSB0aGUgc2Vjb25kIGFycmF5IGludG8gdGhlIGZpcnN0IG9uZVxyXG4gICAgICAgICAgaWYgKG1hdGNoaW5nUHJvbXB0UmVzdWx0cy5pdGVtcyAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgIEFycmF5LnByb3RvdHlwZS5wdXNoLmFwcGx5KF90aGlzLlBsYXllci5pbnZlbnRvcnkuaXRlbXMsIG1hdGNoaW5nUHJvbXB0UmVzdWx0cy5pdGVtcyk7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgICAvLyBTdWNjZXNzZnVsIHByb21wdCBsZWFkcyB0byBuZXcgcm9vbSBlbnRyYW5jZSAoaWYgZGVmaW5lZCBpbiBwcm9tcHQpXHJcbiAgICAgICAgICBpZiAobWF0Y2hpbmdQcm9tcHRSZXN1bHRzLnJvb20gIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICBfdGhpcy5QbGF5ZXIuY3VycmVudFJvb20gPSBtYXRjaGluZ1Byb21wdFJlc3VsdHMucm9vbTtcclxuICAgICAgICAgICAgLy8gQ2hlY2sgdG8gc2VlIGlmIHBsYXllcidzIHdvblxyXG4gICAgICAgICAgICBsZXQgZW50ZXJSb29tUmVzdWx0U3VjY2VzcztcclxuICAgICAgICAgICAgbGV0IGVudGVyUm9vbVJlc3VsdFRleHQ7ICAgICAgICAgICBcclxuICAgICAgICAgICAgW2VudGVyUm9vbVJlc3VsdFRleHQsIGVudGVyUm9vbVJlc3VsdFN1Y2Nlc3NdID0gXHJcbiAgICAgICAgICAgICAgX3RoaXMuUGxheWVyLmVudGVyUm9vbSh0aGlzLmdldFJvb20obWF0Y2hpbmdQcm9tcHRSZXN1bHRzLnJvb20pKTtcclxuICAgICAgICAgICAgaWYgKG1hdGNoaW5nUHJvbXB0UmVzdWx0cy5yb29tID09PSBfdGhpcy5lbmRSb29tKSB7XHJcbiAgICAgICAgICAgICAgaWYgKGVudGVyUm9vbVJlc3VsdFN1Y2Nlc3MpIHtcclxuICAgICAgICAgICAgICAgIC8vIFN1Y2Nlc3NmdWxseSBlbnRlcmVkIHJvb20gdG8gd2luIGdhbWVcclxuICAgICAgICAgICAgICAgIF90aGlzLndpbigpO1xyXG4gICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAvLyBEaXNwbGF5IHJlc3VsdHMgdGV4dCAoZmFpbCB0byBlbnRlciB3aW5uaW5nIHJvb20pXHJcbiAgICAgICAgICAgICAgICBfdGhpcy5EaXNwbGF5LmFwcGVuZChlbnRlclJvb21SZXN1bHRUZXh0KTtcclxuICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgIH1cclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgLy8gUGxheWVyIGRpZG4ndCBzYXkgYW55IGtleXdvcmRzIHRoYXQgdHJpZ2dlcmVkIGFueSBvZiB0aGUgY3VycmVudCByb29tIHByb21wdHNcclxuICAgICAgICAgIF90aGlzLkRpc3BsYXkuc2hvdyhgPHA+Tm8gYWN0aW9ucyBjb3VsZCBiZSBkb25lIGZyb206IFwiJHttZXNzYWdlfVwiLiBUcnkgc29tZXRoaW5nIGVsc2UuPC9wPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAke190aGlzLmdldFJvb20oX3RoaXMuUGxheWVyLmN1cnJlbnRSb29tKS5nZXRUZXh0fVxyXG4gICAgICAgICAgYCk7XHJcbiAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgICB9KTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIC8vIE5vIHByb21wdHMgZXhpc3QgZm9yIHRoZSBjdXJyZW50IHJvb21cclxuICAgICAgX3RoaXMuRGlzcGxheS5zaG93KGA8cD5UaGVyZSBkb2Vzbid0IHNlZW0gdG8gYmUgYW55IGFjdGlvbnMgYXQgYWxsIHRoYXQgeW91IGNhbiBkbyBpbiB0aGlzIHJvb20uPC9wPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAke190aGlzLmdldFJvb20oX3RoaXMuUGxheWVyLmN1cnJlbnRSb29tKS5nZXRUZXh0fVxyXG4gICAgICBgKTtcclxuICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG4gICAgY29uc29sZS5sb2cobWVzc2FnZSwgdGhpcy5QbGF5ZXIpO1xyXG4gIH1cclxuXHJcbiAgZGlzYWJsZUlucHV0KCkge1xyXG4gICAgdGhpcy5JbnB1dC5kaXNhYmxlKCk7XHJcbiAgfVxyXG5cclxuICBlbmFibGVJbnB1dCgpIHtcclxuICAgIHRoaXMuSW5wdXQuZW5hYmxlKCk7XHJcbiAgfVxyXG5cclxuICB3aW4oKSB7XHJcbiAgICAvLyBTaG93IGZpbmFsIHJvb20gdGV4dCAod2luIHRleHQpXHJcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMucm9vbXMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgaWYgKHRoaXMucm9vbXNbaV0ubmFtZSA9PT0gdGhpcy5lbmRSb29tKSB7XHJcbiAgICAgICAgLy8gdGhpcy5EaXNwbGF5LnNob3codGhpcy5yb29tc1tpXS5nZXRUZXh0KTtcclxuICAgICAgICB0aGlzLkRpc3BsYXkuYXBwZW5kKHRoaXMucm9vbXNbaV0uZ2V0VGV4dCk7XHJcbiAgICAgICAgdGhpcy5EaXNwbGF5LmFwcGVuZCgnPHA+R2FtZSBlbmQuPC9wPicpO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgICAvLyBEaXNhYmxlIGFueSBtb3JlIHVzZXIgaW5wdXQgYWZ0ZXIgd2lubmluZ1xyXG4gICAgdGhpcy5kaXNhYmxlSW5wdXQoKTtcclxuICB9XHJcblxyXG4gIHJlc2V0R2FtZSgpIHtcclxuICAgIC8vIFJlc2V0cyBwbGF5ZXIgd2l0aCBibGFuayBpbnZlbnRvcnkgYW5kIGJhY2sgdG8gc3RhcnRpbmcgcm9vbVxyXG4gICAgdGhpcy5QbGF5ZXIuaW52ZW50b3J5ID0gbmV3IEludmVudG9yeSgpO1xyXG4gICAgdGhpcy5QbGF5ZXIuY3VycmVudFJvb20gPSB0aGlzLnN0YXJ0Um9vbTtcclxuICAgIGNvbnN0IHJvb20gPSB0aGlzLmdldFJvb20odGhpcy5zdGFydFJvb20pO1xyXG4gICAgdGhpcy5EaXNwbGF5LnNob3cocm9vbS5nZXRUZXh0KTtcclxuICAgIHRoaXMuSW5wdXQuZW5hYmxlKCk7XHJcbiAgfVxyXG59XHJcbiIsImV4cG9ydCBkZWZhdWx0IGNsYXNzIERpc3BsYXkge1xyXG5cclxuICBjb25zdHJ1Y3RvcihodG1sID0gJycsIGVsZW1lbnRJZCA9ICdkaXNwbGF5Jykge1xyXG4gICAgdGhpcy5odG1sID0gaHRtbDtcclxuICAgIHRoaXMuZWxlbWVudElkID0gZWxlbWVudElkO1xyXG4gIH1cclxuXHJcbiAgc2hvdyhodG1sID0gbnVsbCkge1xyXG4gICAgaWYgKGh0bWwgPT09IG51bGwpIHtcclxuICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQodGhpcy5lbGVtZW50SWQpLmlubmVySFRNTCA9IHRoaXMuaHRtbDtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKHRoaXMuZWxlbWVudElkKS5pbm5lckhUTUwgPSBodG1sO1xyXG4gICAgICB0aGlzLmh0bWwgPSBodG1sO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgYXBwZW5kKGh0bWwpIHtcclxuICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKHRoaXMuZWxlbWVudElkKS5pbm5lckhUTUwgKz0gaHRtbDtcclxuICB9XHJcbn1cclxuIiwiZXhwb3J0IGRlZmF1bHQgY2xhc3MgSW5wdXQge1xyXG5cclxuICBjb25zdHJ1Y3RvcihkaXNhYmxlZCA9IGZhbHNlLCB2YWx1ZSA9ICcnLCBlbGVtZW50SWQgPSAnaW5wdXQnKSB7XHJcbiAgICB0aGlzLmRpc2FibGVkID0gZGlzYWJsZWQ7XHJcbiAgICB0aGlzLnZhbHVlID0gdmFsdWU7XHJcbiAgICB0aGlzLmVsZW1lbnRJZCA9IGVsZW1lbnRJZDtcclxuICB9XHJcblxyXG4gIGVuYWJsZSgpIHtcclxuICAgIHRoaXMuZGlzYWJsZWQgPSBmYWxzZTtcclxuICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdpbnB1dCcpLmRpc2FibGVkID0gZmFsc2U7XHJcbiAgfVxyXG5cclxuICBkaXNhYmxlKCkge1xyXG4gICAgdGhpcy5kaXNhYmxlZCA9IHRydWU7XHJcbiAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnaW5wdXQnKS5kaXNhYmxlZCA9IHRydWU7XHJcbiAgfVxyXG5cclxuICBzZW5kKHZhbHVlKSB7XHJcbiAgICAvLyBOb3JtYWxpemUgaW5wdXQgdmFsdWVzIChpZiBkZXNpcmVkKVxyXG4gICAgdmFsdWUgPSB2YWx1ZS50b0xvd2VyQ2FzZSgpO1xyXG4gICAgdGhpcy52YWx1ZSA9IHZhbHVlO1xyXG4gIH1cclxufVxyXG4iLCJpbXBvcnQgSW52ZW50b3J5IGZyb20gJy4vaW52ZW50b3J5JztcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFBsYXllciB7XHJcblxyXG4gIGNvbnN0cnVjdG9yKG5hbWUgPSAnJywgaW52ZW50b3J5ID0gbmV3IEludmVudG9yeSgpLCBjdXJyZW50Um9vbSA9ICcnLCBzdGFydFJvb20pIHtcclxuICAgIHRoaXMubmFtZSA9IG5hbWU7XHJcbiAgICBpZiAodGhpcy5uYW1lID09PSAnJykge1xyXG4gICAgICB0aGlzLm5hbWUgPSAncGxheWVyJztcclxuICAgIH1cclxuICAgIHRoaXMuaW52ZW50b3J5ID0gaW52ZW50b3J5O1xyXG4gICAgaWYgKHRoaXMuY3VycmVudFJvb20gPT09ICcnKSB7XHJcbiAgICAgIHRoaXMuY3VycmVudFJvb20gPSB0aGlzLnN0YXJ0Um9vbTtcclxuICAgIH1cclxuICAgIHRoaXMuc3RhcnRSb29tID0gc3RhcnRSb29tO1xyXG4gIH1cclxuICBcclxuICBlbnRlclJvb20ocm9vbSkge1xyXG4gICAgY29uc3QgcmVzID0gcm9vbS5lbnRlcih0aGlzLmludmVudG9yeS5pdGVtcyk7XHJcbiAgICBpZiAocmVzWzFdID09PSBmYWxzZSkge1xyXG4gICAgICAvLyBQbGF5ZXIgZGlkIG5vdCBoYXZlIHJlcXVpcmVkIGl0ZW1zIHRvIGVudGVyIHRoZSByb29tXHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICAvLyBFbnRlcmVkIHJvb20gc3VjY2Vzc2Z1bGx5XHJcbiAgICAgIHRoaXMuY3VycmVudFJvb20gPSByb29tLm5hbWU7IFxyXG4gICAgfVxyXG4gICAgLy8gUmV0dXJuIGdhbWUgdGV4dCBhbmQgd2hldGhlciBvciBub3Qgd2Ugd2VyZSBhYmxlIHRvIGVudGVyIHJvb21cclxuICAgIHJldHVybiBbcmVzWzBdLCByZXNbMV1dO1xyXG4gIH1cclxuXHJcbiAgZ2V0SXRlbShpdGVtKSB7XHJcbiAgICB0aGlzLmludmVudG9yeS5hZGRJdGVtKGl0ZW0pO1xyXG4gICAgcmV0dXJuIHRoaXMuaW52ZW50b3J5O1xyXG4gIH1cclxuXHJcbiAgZHJvcEl0ZW0oaXRlbSkge1xyXG4gICAgdGhpcy5pbnZlbnRvcnkuZHJvcEl0ZW0oaXRlbSk7XHJcbiAgICByZXR1cm4gdGhpcy5pbnZlbnRvcnk7XHJcbiAgfVxyXG5cclxuICBkb0FjdGlvbih0ZXh0LCBpdGVtID0gbnVsbCkge1xyXG4gICAgLy8gTm8gaXRlbSBwYXNzZWQsIGNoZWNrIHJvb20gcHJvbXB0cyBmb3IgYWN0aW9uc1xyXG4gICAgaWYgKGl0ZW0gPT09IG51bGwpIHtcclxuICAgICAgcmV0dXJuIHRoaXMuY3VycmVudFJvb20uZG9BY3Rpb24odGV4dCk7XHJcbiAgICB9XHJcbiAgICAvLyBEb2luZyBhY3Rpb24gb24gaXRlbSwgY2hlY2sgaXRlbSBwcm9tcHRzXHJcbiAgICByZXR1cm4gaXRlbS5kb0FjdGlvbih0ZXh0KTtcclxuICB9XHJcbn1cclxuICBcclxuIiwiaW1wb3J0IFByb21wdCBmcm9tICcuL3Byb21wdCc7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBSb29tIHtcclxuXHJcbiAgY29uc3RydWN0b3IobmFtZSA9ICcnLCBnZXRUZXh0ID0gJycsIHByb21wdHMgPSBbXSwgcmVxdWlyZW1lbnRzID0gW10pIHtcclxuICAgIHRoaXMubmFtZSA9IG5hbWU7XHJcbiAgICB0aGlzLmdldFRleHQgPSBnZXRUZXh0OyAvLyBUaGUgdGV4dCB0aGF0IGlzIGRpc3BsYXllZCB3aGVuIHRoZSByb29tIGlzIGVudGVyZWRcclxuICAgIHRoaXMucHJvbXB0cyA9IHByb21wdHM7IC8vIFdoYXQgYXJlIHRoZSBhY3Rpb25zIHRoYXQgd2UgY2FuIGRvIGluIHRoaXMgcm9vbT9cclxuICAgIHRoaXMucmVxdWlyZW1lbnRzID0gcmVxdWlyZW1lbnRzOyAvLyBBbnkgcmVxdWlyZW1lbnRzIChpdGVtcykgbmVlZGVkIHRvIGFjY2VzcyB0aGUgcm9vbVxyXG4gIH1cclxuXHJcbiAgYWRkUHJvbXB0KG5hbWUsIGtleXdvcmRzLCByZXN1bHRUZXh0cykge1xyXG4gICAgY29uc3QgcHJvbXB0ID0gbmV3IFByb21wdChuYW1lLCBrZXl3b3JkcywgcmVzdWx0VGV4dHMpO1xyXG4gICAgdGhpcy5wcm9tcHRzLnB1c2gocHJvbXB0KTtcclxuICAgIHJldHVybiB0aGlzLnByb21wdHM7XHJcbiAgfVxyXG5cclxuICBlbnRlcihpdGVtcyA9IFtdKSB7XHJcbiAgICBsZXQgcmVzdWx0VGV4dCA9ICcnO1xyXG4gICAgbGV0IG1ldEFsbFJlcXVpcmVtZW50cyA9IHRydWU7IC8vIENhbiB3ZSBlbnRlciB0aGUgcm9vbT9cclxuICAgIC8vIFRoZSByb29tIGlzIG5vdCBhY2Nlc3NpYmxlIGJ5IGRlZmF1bHRcclxuICAgIGlmICh0aGlzLnJlcXVpcmVtZW50cyA+IDApIHtcclxuICAgICAgaWYgKGl0ZW1zLmxlbmd0aCA9PT0gMCkge1xyXG4gICAgICAgIG1ldEFsbFJlcXVpcmVtZW50cyA9IGZhbHNlO1xyXG4gICAgICAgIC8vIFJldHVybiBtaXNzaW5nIHJlcXVpcmVtZW50IG1lc3NhZ2VzXHJcbiAgICAgICAgdGhpcy5yZXF1aXJlbWVudHMuZm9yRWFjaChmdW5jdGlvbiAocmVxdWlyZW1lbnQpIHtcclxuICAgICAgICAgIHJlc3VsdFRleHQgKz0gYCR7cmVxdWlyZW1lbnQuZmFpbFRleHR9LiBgO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIC8vIENoZWNrIHRoZSByb29tJ3MgcmVxdWlyZW1lbnRzIGZvciBtYXRjaGluZyBpdGVtc1xyXG4gICAgICAgIHRoaXMucmVxdWlyZW1lbnRzLmZvckVhY2goZnVuY3Rpb24gKHJlcXVpcmVtZW50KSB7XHJcbiAgICAgICAgICBsZXQgZm91bmQgPSBmYWxzZTtcclxuICAgICAgICAgIHRoaXMuaXRlbXMuZm9yRWFjaChmdW5jdGlvbiAoaXRlbSkge1xyXG4gICAgICAgICAgICBpZiAoaXRlbSA9PT0gcmVxdWlyZW1lbnQpIHtcclxuICAgICAgICAgICAgICBmb3VuZCA9IHRydWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgaWYgKGZvdW5kID09PSBmYWxzZSkge1xyXG4gICAgICAgICAgICBtZXRBbGxSZXF1aXJlbWVudHMgPSBmYWxzZTtcclxuICAgICAgICAgICAgLy8gUmV0dXJuIGZhaWwgbWVzc2FnZXMgZm9yIG1pc3NpbmcgcmVxdWlyZW1lbnRzXHJcbiAgICAgICAgICAgIHJlc3VsdFRleHQgKz0gcmVxdWlyZW1lbnQuZmFpbFRleHQ7ICBcclxuICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgICAgICBpZiAobWV0QWxsUmVxdWlyZW1lbnRzID09PSB0cnVlKSB7XHJcbiAgICAgICAgICByZXN1bHRUZXh0ID0gdGhpcy5nZXRUZXh0O1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgfSBlbHNlIHtcclxuICAgICAgcmVzdWx0VGV4dCA9IHRoaXMuZ2V0VGV4dDtcclxuICAgIH1cclxuICAgIC8vIFJldHVybiB0ZXh0IHdpdGggcmVzdWx0VGV4dHMgYW5kIHdoZXRoZXIgb3Igbm90IHJvb20gY291bGQgYmUgZW50ZXJlZFxyXG4gICAgcmV0dXJuIFtyZXN1bHRUZXh0LCBtZXRBbGxSZXF1aXJlbWVudHNdO1xyXG4gIH1cclxuXHJcbiAgZG9BY3Rpb24odmFsdWUpIHtcclxuICAgIC8vIEZvciBub3cgbGV0J3Mgb25seSBkbyBvbmUgYWN0aW9uIGF0IGEgdGltZVxyXG4gICAgbGV0IHJlc3VsdFRleHQgPSB7fTtcclxuICAgIGlmICh0aGlzLnByb21wdHMubGVuZ3RoID09PSAwKSB7XHJcbiAgICAgIHJlc3VsdFRleHRbJ3RleHQnXSA9IFwiVGhlcmUgZG9lc24ndCBzZWVtIHRvIGJlIGFueSBhY3Rpb25zIHlvdSBjYW4gZG8gaW4gdGhpcyByb29tLlwiO1xyXG4gICAgfVxyXG4gICAgT2JqZWN0LnZhbHVlcyh0aGlzLnByb21wdHMpLmZvckVhY2goZnVuY3Rpb24oa2V5LCB2YWwpIHsgXHJcbiAgICAgIGlmICh2YWx1ZSA9PT0ga2V5KSB7XHJcbiAgICAgICAgcmVzdWx0VGV4dFsndGV4dCddID0gdmFsLnJlc3VsdFRleHRUZXh0OyAvLyBTdWNjZXNzZnVsIGFjdGlvbiByZXR1cm5pbmcgcmVzdWx0VGV4dGluZyB0ZXh0XHJcbiAgICAgICAgaWYgKHZhbC5yZXN1bHRUZXh0SXRlbXMgIT09IG51bGwpIHtcclxuICAgICAgICAgIHJlc3VsdFRleHRbJ2l0ZW1zJ10gPSB2YWwucmVzdWx0VGV4dEl0ZW1zOyAvLyBTdWNjZXNzZnVsIGFjdGlvbiByZXN1bHRUZXh0aW5nIGluIG5ldyBpdGVtc1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAodmFsLnJlc3VsdFRleHRSb29tICE9PSBudWxsKSB7XHJcbiAgICAgICAgICByZXN1bHRUZXh0WydyZXN1bHRUZXh0J10gPSB2YWwucmVzdWx0VGV4dFJvb207IC8vIFN1Y2Nlc3NmdWwgYWN0aW9uIHJlc3VsdFRleHRpbmcgaW4gYSBuZXcgcm9vbVxyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgfSk7XHJcbiAgICByZXR1cm4gcmVzdWx0VGV4dDtcclxuICB9XHJcbn1cclxuIiwiZXhwb3J0IGRlZmF1bHQgY2xhc3MgUHJvbXB0IHtcclxuICAgXHJcbiAgY29uc3RydWN0b3IobmFtZSA9ICcnLCBrZXl3b3JkcyA9IFtdLCByZXN1bHRzID0ge30pIHtcclxuICAgIHRoaXMubmFtZSA9IG5hbWU7XHJcbiAgICAvLyBLZXl3b3JkcyB0aGF0IGNhbiB0cmlnZ2VyIHRoZSBwcm9tcHQgKG1ha2UgYWxsIGxvd2VyLWNhc2UgYnkgZGVmYXVsdClcclxuICAgIHRoaXMua2V5d29yZHMgPSBrZXl3b3Jkcy5tYXAoZnVuY3Rpb24odikgeyByZXR1cm4gdi50b0xvd2VyQ2FzZSgpO30pOyBcclxuICAgIC8vIFJlc3VsdHMgdGhhdCBvY2N1ciB3aGVuIHRoaXMgcHJvbXB0IGlzIHN1Y2Nlc3NmdWxseSB0cmlnZ2VyZWQ7IFxyXG4gICAgLy8gdGhlIHJlc3VsdCBrZXlzIGNvbXByaXNlIG9mIOKAnHRleHTigJ0gKHJlcXVpcmVkKSwg4oCcaXRlbXPigJ0gKG9wdGlvbmFsKSxcclxuICAgIC8vIGFuZCDigJxyb29tIChvcHRpb25hbCnigJ0gXHJcbiAgICB0aGlzLnJlc3VsdHMgPSByZXN1bHRzOyBcclxuICB9XHJcblxyXG4gIC8vIENoZWNrIGlmIGlucHV0IG1lc3NhZ2UgbWF0Y2hlcyBhbnkgcHJvbXB0IGtleXdvcmRzXHJcbiAgbWF0Y2hLZXl3b3JkcyhtZXNzYWdlKSB7XHJcbiAgICBsZXQgZm91bmQgPSBmYWxzZTtcclxuICAgIHRoaXMua2V5d29yZHMuZm9yRWFjaChmdW5jdGlvbihrZXl3b3JkKSB7XHJcbiAgICAgIGlmIChtZXNzYWdlLmluY2x1ZGVzKGtleXdvcmQudG9Mb3dlckNhc2UoKSkpIHtcclxuICAgICAgICBmb3VuZCA9IHRydWU7XHJcbiAgICAgIH1cclxuICAgIH0pO1xyXG4gICAgaWYgKGZvdW5kKSB7XHJcbiAgICAgIHJldHVybiB0aGlzLnJlc3VsdHM7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gbnVsbDtcclxuICB9XHJcbn1cclxuIl0sInNvdXJjZVJvb3QiOiIifQ==